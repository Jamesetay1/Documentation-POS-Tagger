oolean ( Java Platform SE 8 ) 
JavaScript is disabled on your browser . 
Skip navigation links 
Overview Package Class Use Tree Deprecated Index Help 
Javaâ„¢ PlatformStandard Ed . 8 
Prev Class Next Class 
Frames No Frames 
All Classes 
Summary : Nested | Field | Constr | Method 
Detail : Field | Constr | Method 
compact1 , compact2 , compact3 java . lang Class Boolean 
java . lang . 
Object 
java . lang . 
Boolean 
All Implemented Interfaces : Serializable , Comparable <Boolean> 
public final class Boolean extends Object implements Serializable , Comparable <Boolean> The Boolean class wraps a value of the primitive type <code> boolean </code> in an object . 
An object of type <code> Boolean </code> contains a single field whose type is <code> boolean </code> . 
In addition , this class provides many methods for converting a <code> boolean </code> to a <code> String </code> and a <code> String </code> to a <code> boolean </code> , as well as other constants and methods useful when dealing with a <code> boolean </code> . 
Since : JDK1 . 0 See Also : Serialized Form 
Field Summary 
Fields 
Modifier and Type Field and Description 
<code> static Boolean </code> <code> FALSE </code> The <code> Boolean </code> object corresponding to the primitive value <code> false </code> . 
<code> static Boolean </code> <code> TRUE </code> The <code> Boolean </code> object corresponding to the primitive value <code> true </code> . 
<code> static Class <Boolean> </code> <code> TYPE </code> The Class object representing the primitive type boolean . 
Constructor Summary 
Constructors 
Constructor and Description 
<code> Boolean ( boolean value ) </code> Allocates a <code> Boolean </code> object representing the <code> value </code> argument . 
<code> Boolean ( String s ) </code> Allocates a <code> Boolean </code> object representing the value <code> true </code> if the string argument is not <code> null </code> and is equal , ignoring case , to the string <code> " true " </code> . 
Method Summary 
All Methods Static Methods Instance Methods Concrete Methods 
Modifier and Type Method and Description 
<code> boolean </code> <code> booleanValue ( ) </code> Returns the value of this <code> Boolean </code> object as a boolean primitive . 
<code> static int </code> <code> compare ( boolean x , boolean y ) </code> Compares two <code> boolean </code> values . 
<code> int </code> <code> compareTo ( Boolean b ) </code> Compares this <code> Boolean </code> instance with another . 
<code> boolean </code> <code> equals ( Object obj ) </code> Returns <code> true </code> if and only if the argument is not <code> null </code> and is a <code> Boolean </code> object that represents the same <code> boolean </code> value as this object . 
<code> static boolean </code> <code> getBoolean ( String name ) </code> Returns <code> true </code> if and only if the system property named by the argument exists and is equal to the string <code> " true " </code> . 
<code> int </code> <code> hashCode ( ) </code> Returns a hash code for this <code> Boolean </code> object . 
<code> static int </code> <code> hashCode ( boolean value ) </code> Returns a hash code for a <code> boolean </code> value ; compatible with <code> Boolean . hashCode ( ) </code> . 
<code> static boolean </code> <code> logicalAnd ( boolean a , boolean b ) </code> Returns the result of applying the logical AND operator to the specified <code> boolean </code> operands . 
<code> static boolean </code> <code> logicalOr ( boolean a , boolean b ) </code> Returns the result of applying the logical OR operator to the specified <code> boolean </code> operands . 
<code> static boolean </code> <code> logicalXor ( boolean a , boolean b ) </code> Returns the result of applying the logical XOR operator to the specified <code> boolean </code> operands . 
<code> static boolean </code> <code> parseBoolean ( String s ) </code> Parses the string argument as a boolean . 
<code> String </code> <code> toString ( ) </code> Returns a <code> String </code> object representing this Boolean ' s value . 
<code> static String </code> <code> toString ( boolean b ) </code> Returns a <code> String </code> object representing the specified boolean . 
<code> static Boolean </code> <code> valueOf ( boolean b ) </code> Returns a <code> Boolean </code> instance representing the specified <code> boolean </code> value . 
<code> static Boolean </code> <code> valueOf ( String s ) </code> Returns a <code> Boolean </code> with a value represented by the specified string . 
Methods inherited from class java . lang . 
Object <code> clone , finalize , getClass , notify , notifyAll , wait , wait , wait </code> 
Field Detail 
TRUE public static final Boolean TRUE The <code> Boolean </code> object corresponding to the primitive value <code> true </code> . 
FALSE public static final Boolean FALSE The <code> Boolean </code> object corresponding to the primitive value <code> false </code> . 
TYPE public static final Class <Boolean> TYPE The Class object representing the primitive type boolean . 
Since : JDK1 . 1 
Constructor Detail 
Boolean public Boolean ( boolean value ) Allocates a <code> Boolean </code> object representing the <code> value </code> argument . 
Note : It is rarely appropriate to use this constructor . Unless a new instance is required , the static factory <code> valueOf ( boolean ) </code> is generally a better choice . 
It is likely to yield significantly better space and time performance . 
Parameters : <code> value </code> - the value of the <code> Boolean </code> . 
Boolean public Boolean ( String s ) Allocates a <code> Boolean </code> object representing the value <code> true </code> if the string argument is not <code> null </code> and is equal , ignoring case , to the string <code> " true " </code> . Otherwise , allocate a <code> Boolean </code> object representing the value <code> false </code> . 
Examples : <code> new Boolean ( " True " ) </code> produces a <code> Boolean </code> object that represents <code> true </code> . <code> new Boolean ( " yes " ) </code> produces a <code> Boolean </code> object that represents <code> false </code> . 
Parameters : <code> s </code> - the string to be converted to a <code> Boolean </code> . 
Method Detail 
parseBoolean public static boolean parseBoolean ( String s ) Parses the string argument as a boolean . 
The <code> boolean </code> returned represents the value <code> true </code> if the string argument is not <code> null </code> and is equal , ignoring case , to the string <code> " true " </code> . Example : <code> Boolean . parseBoolean ( " True " ) </code> returns <code> true </code> . Example : <code> Boolean . parseBoolean ( " yes " ) </code> returns <code> false </code> . 
Parameters : <code> s </code> - the <code> String </code> containing the boolean representation to be parsed Returns : the boolean represented by the string argument Since : 1 . 5 
booleanValue public boolean booleanValue ( ) Returns the value of this <code> Boolean </code> object as a boolean primitive . 
Returns : the primitive <code> boolean </code> value of this object . 
valueOf public static Boolean valueOf ( boolean b ) Returns a <code> Boolean </code> instance representing the specified <code> boolean </code> value . 
If the specified <code> boolean </code> value is <code> true </code> , this method returns <code> Boolean . TRUE </code> ; if it is <code> false </code> , this method returns <code> Boolean . FALSE </code> . If a new <code> Boolean </code> instance is not required , this method should generally be used in preference to the constructor <code> Boolean ( boolean ) </code> , as this method is likely to yield significantly better space and time performance . 
Parameters : <code> b </code> - a boolean value . Returns : a <code> Boolean </code> instance representing <code> b </code> . Since : 1 . 4 
valueOf public static Boolean valueOf ( String s ) Returns a <code> Boolean </code> with a value represented by the specified string . 
The <code> Boolean </code> returned represents a true value if the string argument is not <code> null </code> and is equal , ignoring case , to the string <code> " true " </code> . 
Parameters : <code> s </code> - a string . Returns : the <code> Boolean </code> value represented by the string . 
toString public static String toString ( boolean b ) Returns a <code> String </code> object representing the specified boolean . 
If the specified boolean is <code> true </code> , then the string <code> " true " </code> will be returned , otherwise the string <code> " false " </code> will be returned . 
Parameters : <code> b </code> - the boolean to be converted Returns : the string representation of the specified <code> boolean </code> Since : 1 . 4 
toString public String toString ( ) Returns a <code> String </code> object representing this Boolean ' s value . 
If this object represents the value <code> true </code> , a string equal to <code> " true " </code> is returned . 
Otherwise , a string equal to <code> " false " </code> is returned . 
Overrides : <code> toString </code> in class <code> Object </code> Returns : a string representation of this object . 
hashCode public int hashCode ( ) Returns a hash code for this <code> Boolean </code> object . 
Overrides : <code> hashCode </code> in class <code> Object </code> Returns : the integer <code> 1231 </code> if this object represents <code> true </code> ; returns the integer <code> 1237 </code> if this object represents <code> false </code> . See Also : <code> Object . equals ( java . lang . Object ) </code> , <code> System . identityHashCode ( java . lang . Object ) </code> 
hashCode public static int hashCode ( boolean value ) Returns a hash code for a <code> boolean </code> value ; compatible with <code> Boolean . hashCode ( ) </code> . 
Parameters : <code> value </code> - the value to hash Returns : a hash code value for a <code> boolean </code> value . Since : 1 . 8 
equals public boolean equals ( Object obj ) Returns <code> true </code> if and only if the argument is not <code> null </code> and is a <code> Boolean </code> object that represents the same <code> boolean </code> value as this object . 
Overrides : <code> equals </code> in class <code> Object </code> Parameters : <code> obj </code> - the object to compare with . Returns : <code> true </code> if the Boolean objects represent the same value ; <code> false </code> otherwise . See Also : <code> Object . hashCode ( ) </code> , <code> HashMap </code> 
getBoolean public static boolean getBoolean ( String name ) Returns <code> true </code> if and only if the system property named by the argument exists and is equal to the string <code> " true " </code> . ( Beginning with version 1 . 0 . 2 of the JavaTM platform , the test of this string is case insensitive . ) A system property is accessible through <code> getProperty </code> , a method defined by the <code> System </code> class . 
If there is no property with the specified name , or if the specified name is empty or null , then <code> false </code> is returned . 
Parameters : <code> name </code> - the system property name . Returns : the <code> boolean </code> value of the system property . Throws : <code> SecurityException </code> - for the same reasons as <code> System . getProperty </code> See Also : <code> System . getProperty ( java . lang . String ) </code> , <code> System . getProperty ( java . lang . String , java . lang . String ) </code> 
compareTo public int compareTo ( Boolean b ) Compares this <code> Boolean </code> instance with another . 
Specified by : <code> compareTo </code> in interface <code> Comparable <Boolean> </code> Parameters : <code> b </code> - the <code> Boolean </code> instance to be compared Returns : zero if this object represents the same boolean value as the argument ; a positive value if this object represents true and the argument represents false ; and a negative value if this object represents false and the argument represents true Throws : <code> NullPointerException </code> - if the argument is <code> null </code> Since : 1 . 5 See Also : <code> Comparable </code> 
compare public static int compare ( boolean x , boolean y ) Compares two <code> boolean </code> values . The value returned is identical to what would be returned by : 
Boolean . valueOf ( x ) . compareTo ( Boolean . valueOf ( y ) ) 
Parameters : <code> x </code> - the first <code> boolean </code> to compare <code> y </code> - the second <code> boolean </code> to compare Returns : the value <code> 0 </code> if <code> x = = y </code> ; a value less than <code> 0 </code> if <code> ! x & & y </code> ; and a value greater than <code> 0 </code> if <code> x & & ! y </code> Since : 1 . 7 
logicalAnd public static boolean logicalAnd ( boolean a , boolean b ) Returns the result of applying the logical AND operator to the specified <code> boolean </code> operands . 
Parameters : <code> a </code> - the first operand <code> b </code> - the second operand Returns : the logical AND of <code> a </code> and <code> b </code> Since : 1 . 8 See Also : <code> BinaryOperator </code> 
logicalOr public static boolean logicalOr ( boolean a , boolean b ) Returns the result of applying the logical OR operator to the specified <code> boolean </code> operands . 
Parameters : <code> a </code> - the first operand <code> b </code> - the second operand Returns : the logical OR of <code> a </code> and <code> b </code> Since : 1 . 8 See Also : <code> BinaryOperator </code> 
logicalXor public static boolean logicalXor ( boolean a , boolean b ) Returns the result of applying the logical XOR operator to the specified <code> boolean </code> operands . 
Parameters : <code> a </code> - the first operand <code> b </code> - the second operand Returns : the logical XOR of <code> a </code> and <code> b </code> Since : 1 . 8 See Also : <code> BinaryOperator </code> 
Skip navigation links 
Overview Package Class Use Tree Deprecated Index Help 
Javaâ„¢ PlatformStandard Ed . 8 
Prev Class Next Class 
Frames No Frames 
All Classes 
Summary : Nested | Field | Constr | Method 
Detail : Field | Constr | Method 
Submit a bug or feature For further API reference and developer documentation , see Java SE Documentation . 
That documentation contains more detailed , developer - targeted descriptions , with conceptual overviews , definitions of terms , workarounds , and working code examples . 
Copyright Â© 1993 , 2020 , Oracle and / or its affiliates . 
All rights reserved . 
Use is subject to license terms . 
Also see the documentation redistribution policy 