PrintStream ( Java Platform SE 8 ) 
JavaScript is disabled on your browser . 
Skip navigation links 
Overview Package Class Use Tree Deprecated Index Help 
Javaâ„¢ PlatformStandard Ed . 8 
Prev Class Next Class 
Frames No Frames 
All Classes 
Summary : Nested | Field | Constr | Method 
Detail : Field | Constr | Method 
compact1 , compact2 , compact3 java . io Class PrintStream 
java . lang . 
Object 
java . io . 
OutputStream 
java . io . 
FilterOutputStream 
java . io . 
PrintStream 
All Implemented Interfaces : Closeable , Flushable , Appendable , AutoCloseable 
Direct Known Subclasses : LogStream 
<pre> public class PrintStream extends FilterOutputStream implements Appendable , Closeable </pre> A <code> PrintStream </code> adds functionality to another output stream , namely the ability to print representations of various data values conveniently . 
Two other features are provided as well . 
Unlike other output streams , a <code> PrintStream </code> never throws an <code> IOException </code> ; instead , exceptional situations merely set an internal flag that can be tested via the <code> checkError </code> method . Optionally , a <code> PrintStream </code> can be created so as to flush automatically ; this means that the <code> flush </code> method is automatically invoked after a byte array is written , one of the <code> println </code> methods is invoked , or a newline character or byte ( <code> ' \ n ' </code> ) is written . 
<p> All characters printed by a <code> PrintStream </code> are converted into bytes using the platform ' s default character encoding . 
The <code> <code> PrintWriter class should be used in situations that require writing characters rather than bytes . 
Since : JDK1 . 0 
Field Summary 
Fields inherited from class java . io . FilterOutputStream <code> out </code> 
Constructor Summary 
Constructors 
Constructor and Description 
<code> PrintStream ( File file ) </code> Creates a new print stream , without automatic line flushing , with the specified file . 
<code> PrintStream ( File file , String csn ) </code> Creates a new print stream , without automatic line flushing , with the specified file and charset . 
<code> PrintStream ( OutputStream out ) </code> Creates a new print stream . 
<code> PrintStream ( OutputStream out , boolean autoFlush ) </code> Creates a new print stream . 
<code> PrintStream ( OutputStream out , boolean autoFlush , String encoding ) </code> Creates a new print stream . 
<code> PrintStream ( String fileName ) </code> Creates a new print stream , without automatic line flushing , with the specified file name . 
<code> PrintStream ( String fileName , String csn ) </code> Creates a new print stream , without automatic line flushing , with the specified file name and charset . 
Method Summary 
All Methods Instance Methods Concrete Methods 
Modifier and Type Method and Description 
<code> PrintStream </code> <code> append ( char c ) </code> Appends the specified character to this output stream . 
<code> PrintStream </code> <code> append ( CharSequence csq ) </code> Appends the specified character sequence to this output stream . 
<code> PrintStream </code> <code> append ( CharSequence csq , int start , int end ) </code> Appends a subsequence of the specified character sequence to this output stream . 
<code> boolean </code> <code> checkError ( ) </code> Flushes the stream and checks its error state . 
<code> protected void </code> <code> clearError ( ) </code> Clears the internal error state of this stream . 
<code> void </code> <code> close ( ) </code> Closes the stream . 
<code> void </code> <code> flush ( ) </code> Flushes the stream . 
<code> PrintStream </code> <code> format ( Locale l , String format , Object . . . args ) </code> Writes a formatted string to this output stream using the specified format string and arguments . 
<code> PrintStream </code> <code> format ( String format , Object . . . args ) </code> Writes a formatted string to this output stream using the specified format string and arguments . 
<code> void </code> <code> print ( boolean b ) </code> Prints a boolean value . 
<code> void </code> <code> print ( char c ) </code> Prints a character . 
<code> void </code> <code> print ( char [ ] s ) </code> Prints an array of characters . 
<code> void </code> <code> print ( double d ) </code> Prints a double - precision floating - point number . 
<code> void </code> <code> print ( float f ) </code> Prints a floating - point number . 
<code> void </code> <code> print ( int i ) </code> Prints an integer . 
<code> void </code> <code> print ( long l ) </code> Prints a long integer . 
<code> void </code> <code> print ( Object obj ) </code> Prints an object . 
<code> void </code> <code> print ( String s ) </code> Prints a string . 
<code> PrintStream </code> <code> printf ( Locale l , String format , Object . . . args ) </code> A convenience method to write a formatted string to this output stream using the specified format string and arguments . 
<code> PrintStream </code> <code> printf ( String format , Object . . . args ) </code> A convenience method to write a formatted string to this output stream using the specified format string and arguments . 
<code> void </code> <code> println ( ) </code> Terminates the current line by writing the line separator string . 
<code> void </code> <code> println ( boolean x ) </code> Prints a boolean and then terminate the line . 
<code> void </code> <code> println ( char x ) </code> Prints a character and then terminate the line . 
<code> void </code> <code> println ( char [ ] x ) </code> Prints an array of characters and then terminate the line . 
<code> void </code> <code> println ( double x ) </code> Prints a double and then terminate the line . 
<code> void </code> <code> println ( float x ) </code> Prints a float and then terminate the line . 
<code> void </code> <code> println ( int x ) </code> Prints an integer and then terminate the line . 
<code> void </code> <code> println ( long x ) </code> Prints a long and then terminate the line . 
<code> void </code> <code> println ( Object x ) </code> Prints an Object and then terminate the line . 
<code> void </code> <code> println ( String x ) </code> Prints a String and then terminate the line . 
<code> protected void </code> <code> setError ( ) </code> Sets the error state of the stream to <code> true </code> . 
<code> void </code> <code> write ( byte [ ] buf , int off , int len ) </code> Writes <code> len </code> bytes from the specified byte array starting at offset <code> off </code> to this stream . 
<code> void </code> <code> write ( int b ) </code> Writes the specified byte to this stream . 
Methods inherited from class java . io . 
FilterOutputStream <code> write </code> 
Methods inherited from class java . lang . 
Object <code> clone , equals , finalize , getClass , hashCode , notify , notifyAll , toString , wait , wait , wait </code> 
Constructor Detail 
PrintStream <pre> public PrintStream ( OutputStream out ) </pre> Creates a new print stream . 
This stream will not flush automatically . 
Parameters : <code> out </code> - The output stream to which values and objects will be printed See Also : <code> PrintWriter . PrintWriter ( java . io . OutputStream ) </code> 
PrintStream <pre> public PrintStream ( OutputStream out , boolean autoFlush ) </pre> Creates a new print stream . 
Parameters : <code> out </code> - The output stream to which values and objects will be printed <code> autoFlush </code> - A boolean ; if true , the output buffer will be flushed whenever a byte array is written , one of the <code> println </code> methods is invoked , or a newline character or byte ( <code> ' \ n ' </code> ) is written See Also : <code> PrintWriter . PrintWriter ( java . io . OutputStream , boolean ) </code> 
PrintStream <pre> public PrintStream ( OutputStream out , boolean autoFlush , String encoding ) throws UnsupportedEncodingException </pre> Creates a new print stream . 
Parameters : <code> out </code> - The output stream to which values and objects will be printed <code> autoFlush </code> - A boolean ; if true , the output buffer will be flushed whenever a byte array is written , one of the <code> println </code> methods is invoked , or a newline character or byte ( <code> ' \ n ' </code> ) is written <code> encoding </code> - The name of a supported 
character encoding Throws : <code> UnsupportedEncodingException </code> - If the named encoding is not supported Since : 1 . 4 
PrintStream <pre> public PrintStream ( String fileName ) throws FileNotFoundException </pre> Creates a new print stream , without automatic line flushing , with the specified file name . 
This convenience constructor creates the necessary intermediate <code> OutputStreamWriter </code> , which will encode characters using the default charset for this instance of the Java virtual machine . 
Parameters : <code> fileName </code> - The name of the file to use as the destination of this print stream . 
If the file exists , then it will be truncated to zero size ; otherwise , a new file will be created . 
The output will be written to the file and is buffered . Throws : <code> FileNotFoundException </code> - If the given file object does not denote an existing , writable regular file and a new regular file of that name cannot be created , or if some other error occurs while opening or creating the file <code> SecurityException </code> - If a security manager is present and <code> checkWrite ( fileName ) </code> denies write access to the file Since : 1 . 5 
PrintStream <pre> public PrintStream ( String fileName , String csn ) throws FileNotFoundException , UnsupportedEncodingException </pre> Creates a new print stream , without automatic line flushing , with the specified file name and charset . 
This convenience constructor creates the necessary intermediate <code> OutputStreamWriter </code> , which will encode characters using the provided charset . 
Parameters : <code> fileName </code> - The name of the file to use as the destination of this print stream . 
If the file exists , then it will be truncated to zero size ; otherwise , a new file will be created . 
The output will be written to the file and is buffered . <code> csn </code> - The name of a supported charset Throws : <code> FileNotFoundException </code> - If the given file object does not denote an existing , writable regular file and a new regular file of that name cannot be created , or if some other error occurs while opening or creating the file <code> SecurityException </code> - If a security manager is present and <code> checkWrite ( fileName ) </code> denies write access to the file <code> UnsupportedEncodingException </code> - If the named charset is not supported Since : 1 . 5 
PrintStream <pre> public PrintStream ( File file ) throws FileNotFoundException </pre> Creates a new print stream , without automatic line flushing , with the specified file . 
This convenience constructor creates the necessary intermediate <code> OutputStreamWriter </code> , which will encode characters using the default charset for this instance of the Java virtual machine . 
Parameters : <code> file </code> - The file to use as the destination of this print stream . 
If the file exists , then it will be truncated to zero size ; otherwise , a new file will be created . 
The output will be written to the file and is buffered . Throws : <code> FileNotFoundException </code> - If the given file object does not denote an existing , writable regular file and a new regular file of that name cannot be created , or if some other error occurs while opening or creating the file <code> SecurityException </code> - If a security manager is present and <code> checkWrite ( file . getPath ( ) ) </code> denies write access to the file Since : 1 . 5 
PrintStream <pre> public PrintStream ( File file , String csn ) throws FileNotFoundException , UnsupportedEncodingException </pre> Creates a new print stream , without automatic line flushing , with the specified file and charset . 
This convenience constructor creates the necessary intermediate <code> OutputStreamWriter </code> , which will encode characters using the provided charset . 
Parameters : <code> file </code> - The file to use as the destination of this print stream . 
If the file exists , then it will be truncated to zero size ; otherwise , a new file will be created . 
The output will be written to the file and is buffered . <code> csn </code> - The name of a supported charset Throws : <code> FileNotFoundException </code> - If the given file object does not denote an existing , writable regular file and a new regular file of that name cannot be created , or if some other error occurs while opening or creating the file <code> SecurityException </code> - If a security manager is present and <code> checkWrite ( file . getPath ( ) ) </code> denies write access to the file <code> UnsupportedEncodingException </code> - If the named charset is not supported Since : 1 . 5 
Method Detail 
flush <pre> public void flush ( ) </pre> Flushes the stream . 
This is done by writing any buffered output bytes to the underlying output stream and then flushing that stream . 
Specified by : <code> flush </code> in interface <code> Flushable </code> Overrides : <code> flush </code> in class <code> FilterOutputStream </code> See Also : <code> OutputStream . flush ( ) </code> 
close <pre> public void close ( ) </pre> Closes the stream . 
This is done by flushing the stream and then closing the underlying output stream . 
Specified by : <code> close </code> in interface <code> Closeable </code> Specified by : <code> close </code> in interface <code> AutoCloseable </code> Overrides : <code> close </code> in class <code> FilterOutputStream </code> See Also : <code> OutputStream . close ( ) </code> 
checkError <pre> public boolean checkError ( ) </pre> Flushes the stream and checks its error state . 
The internal error state is set to <code> true </code> when the underlying output stream throws an <code> IOException </code> other than <code> InterruptedIOException </code> , and when the <code> setError </code> method is invoked . 
If an operation on the underlying output stream throws an <code> InterruptedIOException </code> , then the <code> PrintStream </code> converts the exception back into an interrupt by doing : <pre> Thread . currentThread ( ) . interrupt ( ) ; </pre> or the equivalent . 
Returns : <code> true </code> if and only if this stream has encountered an <code> IOException </code> other than <code> InterruptedIOException </code> , or the <code> setError </code> method has been invoked 
setError <pre> protected void setError ( ) </pre> Sets the error state of the stream to <code> true </code> . 
<p> This method will cause subsequent invocations of <code> checkError ( ) </code> to return true until <code> clearError ( ) </code> is invoked . 
Since : JDK1 . 1 
clearError <pre> protected void clearError ( ) </pre> Clears the internal error state of this stream . 
<p> This method will cause subsequent invocations of <code> checkError ( ) </code> to return false until another write operation fails and invokes <code> setError ( ) </code> . 
Since : 1 . 6 
write <pre> public void write ( int b ) </pre> Writes the specified byte to this stream . 
If the byte is a newline and automatic flushing is enabled then the <code> flush </code> method will be invoked . 
<p> Note that the byte is written as given ; to write a character that will be translated according to the platform ' s default character encoding , use the <code> print ( char ) </code> or <code> println ( char ) </code> methods . 
Overrides : <code> write </code> in class <code> FilterOutputStream </code> Parameters : <code> b </code> - The byte to be written See Also : <code> print ( char ) </code> , <code> println ( char ) </code> 
write <pre> public void write ( byte [ ] buf , int off , int len ) </pre> Writes <code> len </code> bytes from the specified byte array starting at offset <code> off </code> to this stream . 
If automatic flushing is enabled then the <code> flush </code> method will be invoked . 
<p> Note that the bytes will be written as given ; to write characters that will be translated according to the platform ' s default character encoding , use the <code> print ( char ) </code> or <code> println ( char ) </code> methods . 
Overrides : <code> write </code> in class <code> FilterOutputStream </code> Parameters : <code> buf </code> - A byte array <code> off </code> - Offset from which to start taking bytes <code> len </code> - Number of bytes to write See Also : <code> FilterOutputStream . write ( int ) </code> 
print <pre> public void print ( boolean b ) </pre> Prints a boolean value . 
The string produced by <code> <code> String . valueOf ( boolean ) is translated into bytes according to the platform ' s default character encoding , and these bytes are written in exactly the manner of the <code> <code> write ( int ) method . 
Parameters : <code> b </code> - The <code> boolean </code> to be printed 
print <pre> public void print ( char c ) </pre> Prints a character . 
The character is translated into one or more bytes according to the platform ' s default character encoding , and these bytes are written in exactly the manner of the <code> <code> write ( int ) method . 
Parameters : <code> c </code> - The <code> char </code> to be printed 
print <pre> public void print ( int i ) </pre> Prints an integer . 
The string produced by <code> <code> String . valueOf ( int ) is translated into bytes according to the platform ' s default character encoding , and these bytes are written in exactly the manner of the <code> <code> write ( int ) method . 
Parameters : <code> i </code> - The <code> int </code> to be printed See Also : <code> Integer . toString ( int ) </code> 
print <pre> public void print ( long l ) </pre> Prints a long integer . 
The string produced by <code> <code> String . valueOf ( long ) is translated into bytes according to the platform ' s default character encoding , and these bytes are written in exactly the manner of the <code> <code> write ( int ) method . 
Parameters : <code> l </code> - The <code> long </code> to be printed See Also : <code> Long . toString ( long ) </code> 
print <pre> public void print ( float f ) </pre> Prints a floating - point number . 
The string produced by <code> <code> String . valueOf ( float ) is translated into bytes according to the platform ' s default character encoding , and these bytes are written in exactly the manner of the <code> <code> write ( int ) method . 
Parameters : <code> f </code> - The <code> float </code> to be printed See Also : <code> Float . toString ( float ) </code> 
print <pre> public void print ( double d ) </pre> Prints a double - precision floating - point number . 
The string produced by <code> <code> String . valueOf ( double ) is translated into bytes according to the platform ' s default character encoding , and these bytes are written in exactly the manner of the <code> <code> write ( int ) method . 
Parameters : <code> d </code> - The <code> double </code> to be printed See Also : <code> Double . toString ( double ) </code> 
print <pre> public void print ( char [ ] s ) </pre> Prints an array of characters . 
The characters are converted into bytes according to the platform ' s default character encoding , and these bytes are written in exactly the manner of the <code> <code> write ( int ) method . 
Parameters : <code> s </code> - The array of chars to be printed Throws : <code> NullPointerException </code> - If <code> s </code> is <code> null </code> 
print <pre> public void print ( String s ) </pre> Prints a string . 
If the argument is <code> null </code> then the string <code> " null " </code> is printed . 
Otherwise , the string ' s characters are converted into bytes according to the platform ' s default character encoding , and these bytes are written in exactly the manner of the <code> <code> write ( int ) method . 
Parameters : <code> s </code> - The <code> String </code> to be printed 
print <pre> public void print ( Object obj ) </pre> Prints an object . 
The string produced by the <code> <code> String . valueOf ( Object ) method is translated into bytes according to the platform ' s default character encoding , and these bytes are written in exactly the manner of the <code> <code> write ( int ) method . 
Parameters : <code> obj </code> - The <code> Object </code> to be printed See Also : <code> Object . toString ( ) </code> 
println <pre> public void println ( ) </pre> Terminates the current line by writing the line separator string . 
The line separator string is defined by the system property <code> line . separator </code> , and is not necessarily a single newline character ( <code> ' \ n ' </code> ) . 
println <pre> public void println ( boolean x ) </pre> Prints a boolean and then terminate the line . 
This method behaves as though it invokes <code> <code> print ( boolean ) and then <code> <code> println ( ) . 
Parameters : <code> x </code> - The <code> boolean </code> to be printed 
println <pre> public void println ( char x ) </pre> Prints a character and then terminate the line . 
This method behaves as though it invokes <code> <code> print ( char ) and then <code> <code> println ( ) . 
Parameters : <code> x </code> - The <code> char </code> to be printed . 
println <pre> public void println ( int x ) </pre> Prints an integer and then terminate the line . 
This method behaves as though it invokes <code> <code> print ( int ) and then <code> <code> println ( ) . 
Parameters : <code> x </code> - The <code> int </code> to be printed . 
println <pre> public void println ( long x ) </pre> Prints a long and then terminate the line . 
This method behaves as though it invokes <code> <code> print ( long ) and then <code> <code> println ( ) . 
Parameters : <code> x </code> - a The <code> long </code> to be printed . 
println <pre> public void println ( float x ) </pre> Prints a float and then terminate the line . 
This method behaves as though it invokes <code> <code> print ( float ) and then <code> <code> println ( ) . 
Parameters : <code> x </code> - The <code> float </code> to be printed . 
println <pre> public void println ( double x ) </pre> Prints a double and then terminate the line . 
This method behaves as though it invokes <code> <code> print ( double ) and then <code> <code> println ( ) . 
Parameters : <code> x </code> - The <code> double </code> to be printed . 
println <pre> public void println ( char [ ] x ) </pre> Prints an array of characters and then terminate the line . 
This method behaves as though it invokes <code> <code> print ( char [ ] ) and then <code> <code> println ( ) . 
Parameters : <code> x </code> - an array of chars to print . 
println <pre> public void println ( String x ) </pre> Prints a String and then terminate the line . 
This method behaves as though it invokes <code> <code> print ( String ) and then <code> <code> println ( ) . 
Parameters : <code> x </code> - The <code> String </code> to be printed . 
println <pre> public void println ( Object x ) </pre> Prints an Object and then terminate the line . 
This method calls at first String . valueOf ( x ) to get the printed object ' s string value , then behaves as though it invokes <code> <code> print ( String ) and then <code> <code> println ( ) . 
Parameters : <code> x </code> - The <code> Object </code> to be printed . 
printf <pre> public PrintStream printf ( String format , Object . . . args ) </pre> A convenience method to write a formatted string to this output stream using the specified format string and arguments . 
<p> An invocation of this method of the form out . printf ( format , args ) behaves in exactly the same way as the invocation 
<pre> out . format ( format , args ) </pre> 
Parameters : <code> format </code> - A format string as described in Format string syntax <code> args </code> - Arguments referenced by the format specifiers in the format string . 
If there are more arguments than format specifiers , the extra arguments are ignored . 
The number of arguments is variable and may be zero . 
The maximum number of arguments is limited by the maximum dimension of a Java array as defined by The Javaâ„¢ Virtual Machine Specification . The behaviour on a null argument depends on the conversion . Returns : This output stream Throws : <code> IllegalFormatException </code> - If a format string contains an illegal syntax , a format specifier that is incompatible with the given arguments , insufficient arguments given the format string , or other illegal conditions . 
For specification of all possible formatting errors , see the Details section of the formatter class specification . <code> NullPointerException </code> - If the format is null Since : 1 . 5 
printf <pre> public PrintStream printf ( Locale l , String format , Object . . . args ) </pre> A convenience method to write a formatted string to this output stream using the specified format string and arguments . 
<p> An invocation of this method of the form out . printf ( l , format , args ) behaves in exactly the same way as the invocation 
<pre> out . format ( l , format , args ) </pre> 
Parameters : <code> l </code> - The locale to apply during formatting . 
If l is null then no localization is applied . <code> format </code> - A format string as described in Format string syntax <code> args </code> - Arguments referenced by the format specifiers in the format string . 
If there are more arguments than format specifiers , the extra arguments are ignored . 
The number of arguments is variable and may be zero . 
The maximum number of arguments is limited by the maximum dimension of a Java array as defined by The Javaâ„¢ Virtual Machine Specification . The behaviour on a null argument depends on the conversion . Returns : This output stream Throws : <code> IllegalFormatException </code> - If a format string contains an illegal syntax , a format specifier that is incompatible with the given arguments , insufficient arguments given the format string , or other illegal conditions . 
For specification of all possible formatting errors , see the Details section of the formatter class specification . <code> NullPointerException </code> - If the format is null Since : 1 . 5 
format <pre> public PrintStream format ( String format , Object . . . args ) </pre> Writes a formatted string to this output stream using the specified format string and arguments . 
<p> The locale always used is the one returned by <code> Locale . getDefault ( ) </code> , regardless of any previous invocations of other formatting methods on this object . 
Parameters : <code> format </code> - A format string as described in Format string syntax <code> args </code> - Arguments referenced by the format specifiers in the format string . 
If there are more arguments than format specifiers , the extra arguments are ignored . 
The number of arguments is variable and may be zero . 
The maximum number of arguments is limited by the maximum dimension of a Java array as defined by The Javaâ„¢ Virtual Machine Specification . The behaviour on a null argument depends on the conversion . Returns : This output stream Throws : <code> IllegalFormatException </code> - If a format string contains an illegal syntax , a format specifier that is incompatible with the given arguments , insufficient arguments given the format string , or other illegal conditions . 
For specification of all possible formatting errors , see the Details section of the formatter class specification . <code> NullPointerException </code> - If the format is null Since : 1 . 5 
format <pre> public PrintStream format ( Locale l , String format , Object . . . args ) </pre> Writes a formatted string to this output stream using the specified format string and arguments . 
Parameters : <code> l </code> - The locale to apply during formatting . 
If l is null then no localization is applied . <code> format </code> - A format string as described in Format string syntax <code> args </code> - Arguments referenced by the format specifiers in the format string . 
If there are more arguments than format specifiers , the extra arguments are ignored . 
The number of arguments is variable and may be zero . 
The maximum number of arguments is limited by the maximum dimension of a Java array as defined by The Javaâ„¢ Virtual Machine Specification . The behaviour on a null argument depends on the conversion . Returns : This output stream Throws : <code> IllegalFormatException </code> - If a format string contains an illegal syntax , a format specifier that is incompatible with the given arguments , insufficient arguments given the format string , or other illegal conditions . 
For specification of all possible formatting errors , see the Details section of the formatter class specification . <code> NullPointerException </code> - If the format is null Since : 1 . 5 
append <pre> public PrintStream append ( CharSequence csq ) </pre> Appends the specified character sequence to this output stream . 
<p> An invocation of this method of the form out . append ( csq ) behaves in exactly the same way as the invocation 
<pre> out . print ( csq . toString ( ) ) </pre> 
<p> Depending on the specification of toString for the character sequence csq , the entire sequence may not be appended . 
For instance , invoking then toString method of a character buffer will return a subsequence whose content depends upon the buffer ' s position and limit . 
Specified by : <code> append </code> in interface <code> Appendable </code> Parameters : <code> csq </code> - The character sequence to append . 
If csq is null , then the four characters " null " are appended to this output stream . Returns : This output stream Since : 1 . 5 
append <pre> public PrintStream append ( CharSequence csq , int start , int end ) </pre> Appends a subsequence of the specified character sequence to this output stream . 
<p> An invocation of this method of the form out . append ( csq , start , end ) when csq is not null , behaves in exactly the same way as the invocation 
<pre> out . print ( csq . subSequence ( start , end ) . toString ( ) ) </pre> 
Specified by : <code> append </code> in interface <code> Appendable </code> Parameters : <code> csq </code> - The character sequence from which a subsequence will be appended . 
If csq is null , then characters will be appended as if csq contained the four characters " null " . <code> start </code> - The index of the first character in the subsequence <code> end </code> - The index of the character following the last character in the subsequence Returns : This output stream Throws : <code> IndexOutOfBoundsException </code> - If start or end are negative , start is greater than end , or end is greater than csq . length ( ) Since : 1 . 5 
append <pre> public PrintStream append ( char c ) </pre> Appends the specified character to this output stream . 
<p> An invocation of this method of the form out . append ( c ) behaves in exactly the same way as the invocation 
<pre> out . print ( c ) </pre> 
Specified by : <code> append </code> in interface <code> Appendable </code> Parameters : <code> c </code> - The 16 - bit character to append Returns : This output stream Since : 1 . 5 
Skip navigation links 
Overview Package Class Use Tree Deprecated Index Help 
Javaâ„¢ PlatformStandard Ed . 8 
Prev Class Next Class 
Frames No Frames 
All Classes 
Summary : Nested | Field | Constr | Method 
Detail : Field | Constr | Method 
Submit a bug or feature For further API reference and developer documentation , see Java SE Documentation . 
That documentation contains more detailed , developer - targeted descriptions , with conceptual overviews , definitions of terms , workarounds , and working code examples . 
Copyright Â© 1993 , 2020 , Oracle and / or its affiliates . 
All rights reserved . 
Use is subject to license terms . 
Also see the documentation redistribution policy . 