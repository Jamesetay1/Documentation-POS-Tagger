Random ( Java Platform SE 8 ) 
JavaScript is disabled on your browser . 
Skip navigation links 
Overview Package Class Use Tree Deprecated Index Help 
Javaâ„¢ PlatformStandard Ed . 8 
Prev Class Next Class 
Frames No Frames 
All Classes 
Summary : Nested | Field | Constr | Method 
Detail : Field | Constr | Method 
compact1 , compact2 , compact3 java . util Class Random 
java . lang . 
Object 
java . util . 
Random 
All Implemented Interfaces : Serializable 
Direct Known Subclasses : SecureRandom , ThreadLocalRandom 
<pre> public class Random extends Object implements Serializable </pre> An instance of this class is used to generate a stream of pseudorandom numbers . 
The class uses a 48 - bit seed , which is modified using a linear congruential formula . ( See Donald Knuth , The Art of Computer Programming , Volume 2 , Section 3 . 2 . 1 . ) 
<p> If two instances of <code> Random </code> are created with the same seed , and the same sequence of method calls is made for each , they will generate and return identical sequences of numbers . 
In order to guarantee this property , particular algorithms are specified for the class <code> Random </code> . 
Java implementations must use all the algorithms shown here for the class <code> Random </code> , for the sake of absolute portability of Java code . 
However , subclasses of class <code> Random </code> are permitted to use other algorithms , so long as they adhere to the general contracts for all the methods . 
<p> The algorithms implemented by class <code> Random </code> use a <code> protected </code> utility method that on each invocation can supply up to 32 pseudorandomly generated bits . 
<p> Many applications will find the method <code> Math . random ( ) </code> simpler to use . 
<p> Instances of <code> java . util . Random </code> are threadsafe . However , the concurrent use of the same <code> java . util . Random </code> instance across threads may encounter contention and consequent poor performance . 
Consider instead using <code> ThreadLocalRandom </code> in multithreaded designs . 
<p> Instances of <code> java . util . Random </code> are not cryptographically secure . 
Consider instead using <code> SecureRandom </code> to get a cryptographically secure pseudo - random number generator for use by security - sensitive applications . 
Since : 1 . 0 See Also : Serialized Form 
Constructor Summary 
Constructors 
Constructor and Description 
<code> Random ( ) </code> Creates a new random number generator . 
<code> Random ( long seed ) </code> Creates a new random number generator using a single <code> long </code> seed . 
Method Summary 
All Methods Instance Methods Concrete Methods 
Modifier and Type Method and Description 
<code> DoubleStream </code> <code> doubles ( ) </code> Returns an effectively unlimited stream of pseudorandom <code> double </code> values , each between zero ( inclusive ) and one ( exclusive ) . 
<code> DoubleStream </code> <code> doubles ( double randomNumberOrigin , double randomNumberBound ) </code> Returns an effectively unlimited stream of pseudorandom <code> double </code> values , each conforming to the given origin ( inclusive ) and bound ( exclusive ) . 
<code> DoubleStream </code> <code> doubles ( long streamSize ) </code> Returns a stream producing the given <code> streamSize </code> number of pseudorandom <code> double </code> values , each between zero ( inclusive ) and one ( exclusive ) . 
<code> DoubleStream </code> <code> doubles ( long streamSize , double randomNumberOrigin , double randomNumberBound ) </code> Returns a stream producing the given <code> streamSize </code> number of pseudorandom <code> double </code> values , each conforming to the given origin ( inclusive ) and bound ( exclusive ) . 
<code> IntStream </code> <code> ints ( ) </code> Returns an effectively unlimited stream of pseudorandom <code> int </code> values . 
<code> IntStream </code> <code> ints ( int randomNumberOrigin , int randomNumberBound ) </code> Returns an effectively unlimited stream of pseudorandom <code> int </code> values , each conforming to the given origin ( inclusive ) and bound ( exclusive ) . 
<code> IntStream </code> <code> ints ( long streamSize ) </code> Returns a stream producing the given <code> streamSize </code> number of pseudorandom <code> int </code> values . 
<code> IntStream </code> <code> ints ( long streamSize , int randomNumberOrigin , int randomNumberBound ) </code> Returns a stream producing the given <code> streamSize </code> number of pseudorandom <code> int </code> values , each conforming to the given origin ( inclusive ) and bound ( exclusive ) . 
<code> LongStream </code> <code> longs ( ) </code> Returns an effectively unlimited stream of pseudorandom <code> long </code> values . 
<code> LongStream </code> <code> longs ( long streamSize ) </code> Returns a stream producing the given <code> streamSize </code> number of pseudorandom <code> long </code> values . 
<code> LongStream </code> <code> longs ( long randomNumberOrigin , long randomNumberBound ) </code> Returns an effectively unlimited stream of pseudorandom <code> long </code> values , each conforming to the given origin ( inclusive ) and bound ( exclusive ) . 
<code> LongStream </code> <code> longs ( long streamSize , long randomNumberOrigin , long randomNumberBound ) </code> Returns a stream producing the given <code> streamSize </code> number of pseudorandom <code> long </code> , each conforming to the given origin ( inclusive ) and bound ( exclusive ) . 
<code> protected int </code> <code> next ( int bits ) </code> Generates the next pseudorandom number . 
<code> boolean </code> <code> nextBoolean ( ) </code> Returns the next pseudorandom , uniformly distributed <code> boolean </code> value from this random number generator ' s sequence . 
<code> void </code> <code> nextBytes ( byte [ ] bytes ) </code> Generates random bytes and places them into a user - supplied byte array . 
<code> double </code> <code> nextDouble ( ) </code> Returns the next pseudorandom , uniformly distributed <code> double </code> value between <code> 0 . 0 </code> and <code> 1 . 0 </code> from this random number generator ' s sequence . 
<code> float </code> <code> nextFloat ( ) </code> Returns the next pseudorandom , uniformly distributed <code> float </code> value between <code> 0 . 0 </code> and <code> 1 . 0 </code> from this random number generator ' s sequence . 
<code> double </code> <code> nextGaussian ( ) </code> Returns the next pseudorandom , Gaussian ( " normally " ) distributed <code> double </code> value with mean <code> 0 . 0 </code> and standard deviation <code> 1 . 0 </code> from this random number generator ' s sequence . 
<code> int </code> <code> nextInt ( ) </code> Returns the next pseudorandom , uniformly distributed <code> int </code> value from this random number generator ' s sequence . 
<code> int </code> <code> nextInt ( int bound ) </code> Returns a pseudorandom , uniformly distributed <code> int </code> value between 0 ( inclusive ) and the specified value ( exclusive ) , drawn from this random number generator ' s sequence . 
<code> long </code> <code> nextLong ( ) </code> Returns the next pseudorandom , uniformly distributed <code> long </code> value from this random number generator ' s sequence . 
<code> void </code> <code> setSeed ( long seed ) </code> Sets the seed of this random number generator using a single <code> long </code> seed . 
Methods inherited from class java . lang . 
Object <code> clone , equals , finalize , getClass , hashCode , notify , notifyAll , toString , wait , wait , wait </code> 
Constructor Detail 
Random <pre> public Random ( ) </pre> Creates a new random number generator . 
This constructor sets the seed of the random number generator to a value very likely to be distinct from any other invocation of this constructor . 
Random <pre> public Random ( long seed ) </pre> Creates a new random number generator using a single <code> long </code> seed . The seed is the initial value of the internal state of the pseudorandom number generator which is maintained by method <code> next ( int ) </code> . 
<p> The invocation <code> new Random ( seed ) </code> is equivalent to : <pre> <code> Random rnd = new Random ( ) ; rnd . setSeed ( seed ) ; 
Parameters : <code> seed </code> - the initial seed See Also : <code> setSeed ( long ) </code> 
Method Detail 
setSeed <pre> public void setSeed ( long seed ) </pre> Sets the seed of this random number generator using a single <code> long </code> seed . 
The general contract of <code> setSeed </code> is that it alters the state of this random number generator object so as to be in exactly the same state as if it had just been created with the argument <code> seed </code> as a seed . 
The method <code> setSeed </code> is implemented by class <code> Random </code> by atomically updating the seed to <pre> <code> ( seed ^ 0x5DEECE66DL ) & ( ( 1L < < 48 ) - 1 ) and clearing the <code> haveNextNextGaussian </code> flag used by <code> nextGaussian ( ) </code> . 
<p> The implementation of <code> setSeed </code> by class <code> Random </code> happens to use only 48 bits of the given seed . 
In general , however , an overriding method may use all 64 bits of the <code> long </code> argument as a seed value . 
Parameters : <code> seed </code> - the initial seed 
next <pre> protected int next ( int bits ) </pre> Generates the next pseudorandom number . 
Subclasses should override this , as this is used by all other methods . 
<p> The general contract of <code> next </code> is that it returns an <code> int </code> value and if the argument <code> bits </code> is between <code> 1 </code> and <code> 32 </code> ( inclusive ) , then that many low - order bits of the returned value will be ( approximately ) independently chosen bit values , each of which is ( approximately ) equally likely to be <code> 0 </code> or <code> 1 </code> . 
The method <code> next </code> is implemented by class <code> Random </code> by atomically updating the seed to <pre> <code> ( seed * 0x5DEECE66DL + 0xBL ) & ( ( 1L < < 48 ) - 1 ) and returning <pre> <code> ( int ) ( seed > > > ( 48 - bits ) ) </code> . </pre> 
This is a linear congruential pseudorandom number generator , as defined by D . 
H . 
Lehmer and described by Donald E . 
Knuth in The Art of Computer Programming , Volume 3 : Seminumerical Algorithms , section 3 . 2 . 1 . 
Parameters : <code> bits </code> - random bits Returns : the next pseudorandom value from this random number generator ' s sequence Since : 1 . 1 
nextBytes <pre> public void nextBytes ( byte [ ] bytes ) </pre> Generates random bytes and places them into a user - supplied byte array . 
The number of random bytes produced is equal to the length of the byte array . 
<p> The method <code> nextBytes </code> is implemented by class <code> Random </code> as if by : <pre> <code> public void nextBytes ( byte [ ] bytes ) { for ( int i = 0 ; i < bytes . length ; ) for ( int rnd = nextInt ( ) , n = Math . min ( bytes . length - i , 4 ) ; n - - > 0 ; rnd > > = 8 ) bytes [ i + + ] = ( byte ) rnd ; } 
Parameters : <code> bytes </code> - the byte array to fill with random bytes Throws : <code> NullPointerException </code> - if the byte array is null Since : 1 . 1 
nextInt <pre> public int nextInt ( ) </pre> Returns the next pseudorandom , uniformly distributed <code> int </code> value from this random number generator ' s sequence . 
The general contract of <code> nextInt </code> is that one <code> int </code> value is pseudorandomly generated and returned . 
All 232 possible <code> int </code> values are produced with ( approximately ) equal probability . 
<p> The method <code> nextInt </code> is implemented by class <code> Random </code> as if by : <pre> <code> public int nextInt ( ) { return next ( 32 ) ; } 
Returns : the next pseudorandom , uniformly distributed <code> int </code> value from this random number generator ' s sequence 
nextInt <pre> public int nextInt ( int bound ) </pre> Returns a pseudorandom , uniformly distributed <code> int </code> value between 0 ( inclusive ) and the specified value ( exclusive ) , drawn from this random number generator ' s sequence . 
The general contract of <code> nextInt </code> is that one <code> int </code> value in the specified range is pseudorandomly generated and returned . 
All <code> bound </code> possible <code> int </code> values are produced with ( approximately ) equal probability . 
The method <code> nextInt ( int bound ) </code> is implemented by class <code> Random </code> as if by : <pre> <code> public int nextInt ( int bound ) { if ( bound < = 0 ) throw new IllegalArgumentException ( " bound must be positive " ) ; 
if ( ( bound & - bound ) = = bound ) / / i . e . , bound is a power of 2 return ( int ) ( ( bound * ( long ) next ( 31 ) ) > > 31 ) ; 
int bits , val ; do { bits = next ( 31 ) ; val = bits % bound ; } while ( bits - val + ( bound - 1 ) < 0 ) ; return val ; } 
<p> The hedge " approximately " is used in the foregoing description only because the next method is only approximately an unbiased source of independently chosen bits . If it were a perfect source of randomly chosen bits , then the algorithm shown would choose <code> int </code> values from the stated range with perfect uniformity . 
<p> The algorithm is slightly tricky . 
It rejects values that would result in an uneven distribution ( due to the fact that 2 ^ 31 is not divisible by n ) . 
The probability of a value being rejected depends on n . 
The worst case is n = 2 ^ 30 + 1 , for which the probability of a reject is 1 / 2 , and the expected number of iterations before the loop terminates is 2 . 
<p> The algorithm treats the case where n is a power of two specially : it returns the correct number of high - order bits from the underlying pseudo - random number generator . 
In the absence of special treatment , the correct number of low - order bits would be returned . 
Linear congruential pseudo - random number generators such as the one implemented by this class are known to have short periods in the sequence of values of their low - order bits . 
Thus , this special case greatly increases the length of the sequence of values returned by successive calls to this method if n is a small power of two . 
Parameters : <code> bound </code> - the upper bound ( exclusive ) . 
Must be positive . Returns : the next pseudorandom , uniformly distributed <code> int </code> value between zero ( inclusive ) and <code> bound </code> ( exclusive ) from this random number generator ' s sequence Throws : <code> IllegalArgumentException </code> - if bound is not positive Since : 1 . 2 
nextLong <pre> public long nextLong ( ) </pre> Returns the next pseudorandom , uniformly distributed <code> long </code> value from this random number generator ' s sequence . 
The general contract of <code> nextLong </code> is that one <code> long </code> value is pseudorandomly generated and returned . 
<p> The method <code> nextLong </code> is implemented by class <code> Random </code> as if by : <pre> <code> public long nextLong ( ) { return ( ( long ) next ( 32 ) < < 32 ) + next ( 32 ) ; } 
Because class <code> Random </code> uses a seed with only 48 bits , this algorithm will not return all possible <code> long </code> values . 
Returns : the next pseudorandom , uniformly distributed <code> long </code> value from this random number generator ' s sequence 
nextBoolean <pre> public boolean nextBoolean ( ) </pre> Returns the next pseudorandom , uniformly distributed <code> boolean </code> value from this random number generator ' s sequence . 
The general contract of <code> nextBoolean </code> is that one <code> boolean </code> value is pseudorandomly generated and returned . 
The values <code> true </code> and <code> false </code> are produced with ( approximately ) equal probability . 
<p> The method <code> nextBoolean </code> is implemented by class <code> Random </code> as if by : <pre> <code> public boolean nextBoolean ( ) { return next ( 1 ) ! = 0 ; } 
Returns : the next pseudorandom , uniformly distributed <code> boolean </code> value from this random number generator ' s sequence Since : 1 . 2 
nextFloat <pre> public float nextFloat ( ) </pre> Returns the next pseudorandom , uniformly distributed <code> float </code> value between <code> 0 . 0 </code> and <code> 1 . 0 </code> from this random number generator ' s sequence . 
<p> The general contract of <code> nextFloat </code> is that one <code> float </code> value , chosen ( approximately ) uniformly from the range <code> 0 . 0f </code> ( inclusive ) to <code> 1 . 0f </code> ( exclusive ) , is pseudorandomly generated and returned . 
All 224 possible <code> float </code> values of the form m x 2 - 24 , where m is a positive integer less than 224 , are produced with ( approximately ) equal probability . 
<p> The method <code> nextFloat </code> is implemented by class <code> Random </code> as if by : <pre> <code> public float nextFloat ( ) { return next ( 24 ) / ( ( float ) ( 1 < < 24 ) ) ; } 
<p> The hedge " approximately " is used in the foregoing description only because the next method is only approximately an unbiased source of independently chosen bits . If it were a perfect source of randomly chosen bits , then the algorithm shown would choose <code> float </code> values from the stated range with perfect uniformity . 
<p> [ In early versions of Java , the result was incorrectly calculated as : <pre> <code> return next ( 30 ) / ( ( float ) ( 1 < < 30 ) ) ; This might seem to be equivalent , if not better , but in fact it introduced a slight nonuniformity because of the bias in the rounding of floating - point numbers : it was slightly more likely that the low - order bit of the significand would be 0 than that it would be 1 . ] 
Returns : the next pseudorandom , uniformly distributed <code> float </code> value between <code> 0 . 0 </code> and <code> 1 . 0 </code> from this random number generator ' s sequence 
nextDouble <pre> public double nextDouble ( ) </pre> Returns the next pseudorandom , uniformly distributed <code> double </code> value between <code> 0 . 0 </code> and <code> 1 . 0 </code> from this random number generator ' s sequence . 
<p> The general contract of <code> nextDouble </code> is that one <code> double </code> value , chosen ( approximately ) uniformly from the range <code> 0 . 0d </code> ( inclusive ) to <code> 1 . 0d </code> ( exclusive ) , is pseudorandomly generated and returned . 
<p> The method <code> nextDouble </code> is implemented by class <code> Random </code> as if by : <pre> <code> public double nextDouble ( ) { return ( ( ( long ) next ( 26 ) < < 27 ) + next ( 27 ) ) / ( double ) ( 1L < < 53 ) ; } 
<p> The hedge " approximately " is used in the foregoing description only because the <code> next </code> method is only approximately an unbiased source of independently chosen bits . 
If it were a perfect source of randomly chosen bits , then the algorithm shown would choose <code> double </code> values from the stated range with perfect uniformity . 
<p> [ In early versions of Java , the result was incorrectly calculated as : <pre> <code> return ( ( ( long ) next ( 27 ) < < 27 ) + next ( 27 ) ) / ( double ) ( 1L < < 54 ) ; This might seem to be equivalent , if not better , but in fact it introduced a large nonuniformity because of the bias in the rounding of floating - point numbers : it was three times as likely that the low - order bit of the significand would be 0 than that it would be 1 ! This nonuniformity probably doesn ' t matter much in practice , but we strive for perfection . ] 
Returns : the next pseudorandom , uniformly distributed <code> double </code> value between <code> 0 . 0 </code> and <code> 1 . 0 </code> from this random number generator ' s sequence See Also : <code> Math . random ( ) </code> 
nextGaussian <pre> public double nextGaussian ( ) </pre> Returns the next pseudorandom , Gaussian ( " normally " ) distributed <code> double </code> value with mean <code> 0 . 0 </code> and standard deviation <code> 1 . 0 </code> from this random number generator ' s sequence . 
<p> The general contract of <code> nextGaussian </code> is that one <code> double </code> value , chosen from ( approximately ) the usual normal distribution with mean <code> 0 . 0 </code> and standard deviation <code> 1 . 0 </code> , is pseudorandomly generated and returned . 
<p> The method <code> nextGaussian </code> is implemented by class <code> Random </code> as if by a threadsafe version of the following : <pre> <code> private double nextNextGaussian ; private boolean haveNextNextGaussian = false ; 
public double nextGaussian ( ) { if ( haveNextNextGaussian ) { haveNextNextGaussian = false ; return nextNextGaussian ; } else { double v1 , v2 , s ; do { v1 = 2 * nextDouble ( ) - 1 ; / / between - 1 . 0 and 1 . 0 v2 = 2 * nextDouble ( ) - 1 ; / / between - 1 . 0 and 1 . 0 s = v1 * v1 + v2 * v2 ; } while ( s > = 1 | | s = = 0 ) ; double multiplier = StrictMath . sqrt ( - 2 * StrictMath . log ( s ) / s ) ; nextNextGaussian = v2 * multiplier ; haveNextNextGaussian = true ; return v1 * multiplier ; } } This uses the polar method of G . E . P . Box , M . E . Muller , and G . Marsaglia , as described by Donald E . Knuth in The Art of Computer Programming , Volume 3 : Seminumerical Algorithms , section 3 . 4 . 1 , subsection C , algorithm P . Note that it generates two independent values at the cost of only one call to <code> StrictMath . log </code> and one call to <code> StrictMath . sqrt </code> . 
Returns : the next pseudorandom , Gaussian ( " normally " ) distributed <code> double </code> value with mean <code> 0 . 0 </code> and standard deviation <code> 1 . 0 </code> from this random number generator ' s sequence 
ints <pre> public IntStream ints ( long streamSize ) </pre> Returns a stream producing the given <code> streamSize </code> number of pseudorandom <code> int </code> values . 
<p> A pseudorandom <code> int </code> value is generated as if it ' s the result of calling the method <code> nextInt ( ) </code> . 
Parameters : <code> streamSize </code> - the number of values to generate Returns : a stream of pseudorandom <code> int </code> values Throws : <code> IllegalArgumentException </code> - if <code> streamSize </code> is less than zero Since : 1 . 8 
ints <pre> public IntStream ints ( ) </pre> Returns an effectively unlimited stream of pseudorandom <code> int </code> values . 
<p> A pseudorandom <code> int </code> value is generated as if it ' s the result of calling the method <code> nextInt ( ) </code> . 
Implementation Note : This method is implemented to be equivalent to <code> ints ( Long . MAX _ VALUE ) </code> . Returns : a stream of pseudorandom <code> int </code> values Since : 1 . 8 
ints <pre> public IntStream ints ( long streamSize , int randomNumberOrigin , int randomNumberBound ) </pre> Returns a stream producing the given <code> streamSize </code> number of pseudorandom <code> int </code> values , each conforming to the given origin ( inclusive ) and bound ( exclusive ) . 
<p> A pseudorandom <code> int </code> value is generated as if it ' s the result of calling the following method with the origin and bound : <pre> <code> int nextInt ( int origin , int bound ) { int n = bound - origin ; if ( n > 0 ) { return nextInt ( n ) + origin ; } else { / / range not representable as int int r ; do { r = nextInt ( ) ; } while ( r < origin | | r > = bound ) ; return r ; } } 
Parameters : <code> streamSize </code> - the number of values to generate <code> randomNumberOrigin </code> - the origin ( inclusive ) of each random value <code> randomNumberBound </code> - the bound ( exclusive ) of each random value Returns : a stream of pseudorandom <code> int </code> values , each with the given origin ( inclusive ) and bound ( exclusive ) Throws : <code> IllegalArgumentException </code> - if <code> streamSize </code> is less than zero , or <code> randomNumberOrigin </code> is greater than or equal to <code> randomNumberBound </code> Since : 1 . 8 
ints <pre> public IntStream ints ( int randomNumberOrigin , int randomNumberBound ) </pre> Returns an effectively unlimited stream of pseudorandom <code> int </code> values , each conforming to the given origin ( inclusive ) and bound ( exclusive ) . 
<p> A pseudorandom <code> int </code> value is generated as if it ' s the result of calling the following method with the origin and bound : <pre> <code> int nextInt ( int origin , int bound ) { int n = bound - origin ; if ( n > 0 ) { return nextInt ( n ) + origin ; } else { / / range not representable as int int r ; do { r = nextInt ( ) ; } while ( r < origin | | r > = bound ) ; return r ; } } 
Implementation Note : This method is implemented to be equivalent to <code> ints ( Long . MAX _ VALUE , randomNumberOrigin , randomNumberBound ) </code> . Parameters : <code> randomNumberOrigin </code> - the origin ( inclusive ) of each random value <code> randomNumberBound </code> - the bound ( exclusive ) of each random value Returns : a stream of pseudorandom <code> int </code> values , each with the given origin ( inclusive ) and bound ( exclusive ) Throws : <code> IllegalArgumentException </code> - if <code> randomNumberOrigin </code> is greater than or equal to <code> randomNumberBound </code> Since : 1 . 8 
longs <pre> public LongStream longs ( long streamSize ) </pre> Returns a stream producing the given <code> streamSize </code> number of pseudorandom <code> long </code> values . 
<p> A pseudorandom <code> long </code> value is generated as if it ' s the result of calling the method <code> nextLong ( ) </code> . 
Parameters : <code> streamSize </code> - the number of values to generate Returns : a stream of pseudorandom <code> long </code> values Throws : <code> IllegalArgumentException </code> - if <code> streamSize </code> is less than zero Since : 1 . 8 
longs <pre> public LongStream longs ( ) </pre> Returns an effectively unlimited stream of pseudorandom <code> long </code> values . 
<p> A pseudorandom <code> long </code> value is generated as if it ' s the result of calling the method <code> nextLong ( ) </code> . 
Implementation Note : This method is implemented to be equivalent to <code> longs ( Long . MAX _ VALUE ) </code> . Returns : a stream of pseudorandom <code> long </code> values Since : 1 . 8 
longs <pre> public LongStream longs ( long streamSize , long randomNumberOrigin , long randomNumberBound ) </pre> Returns a stream producing the given <code> streamSize </code> number of pseudorandom <code> long </code> , each conforming to the given origin ( inclusive ) and bound ( exclusive ) . 
<p> A pseudorandom <code> long </code> value is generated as if it ' s the result of calling the following method with the origin and bound : <pre> <code> long nextLong ( long origin , long bound ) { long r = nextLong ( ) ; long n = bound - origin , m = n - 1 ; if ( ( n & m ) = = 0L ) / / power of two r = ( r & m ) + origin ; else if ( n > 0L ) { / / reject over - represented candidates for ( long u = r > > > 1 ; / / ensure nonnegative u + m - ( r = u % n ) < 0L ; / / rejection check u = nextLong ( ) > > > 1 ) / / retry ; r + = origin ; } else { / / range not representable as long while ( r < origin | | r > = bound ) r = nextLong ( ) ; } return r ; } 
Parameters : <code> streamSize </code> - the number of values to generate <code> randomNumberOrigin </code> - the origin ( inclusive ) of each random value <code> randomNumberBound </code> - the bound ( exclusive ) of each random value Returns : a stream of pseudorandom <code> long </code> values , each with the given origin ( inclusive ) and bound ( exclusive ) Throws : <code> IllegalArgumentException </code> - if <code> streamSize </code> is less than zero , or <code> randomNumberOrigin </code> is greater than or equal to <code> randomNumberBound </code> Since : 1 . 8 
longs <pre> public LongStream longs ( long randomNumberOrigin , long randomNumberBound ) </pre> Returns an effectively unlimited stream of pseudorandom <code> long </code> values , each conforming to the given origin ( inclusive ) and bound ( exclusive ) . 
<p> A pseudorandom <code> long </code> value is generated as if it ' s the result of calling the following method with the origin and bound : <pre> <code> long nextLong ( long origin , long bound ) { long r = nextLong ( ) ; long n = bound - origin , m = n - 1 ; if ( ( n & m ) = = 0L ) / / power of two r = ( r & m ) + origin ; else if ( n > 0L ) { / / reject over - represented candidates for ( long u = r > > > 1 ; / / ensure nonnegative u + m - ( r = u % n ) < 0L ; / / rejection check u = nextLong ( ) > > > 1 ) / / retry ; r + = origin ; } else { / / range not representable as long while ( r < origin | | r > = bound ) r = nextLong ( ) ; } return r ; } 
Implementation Note : This method is implemented to be equivalent to <code> longs ( Long . MAX _ VALUE , randomNumberOrigin , randomNumberBound ) </code> . Parameters : <code> randomNumberOrigin </code> - the origin ( inclusive ) of each random value <code> randomNumberBound </code> - the bound ( exclusive ) of each random value Returns : a stream of pseudorandom <code> long </code> values , each with the given origin ( inclusive ) and bound ( exclusive ) Throws : <code> IllegalArgumentException </code> - if <code> randomNumberOrigin </code> is greater than or equal to <code> randomNumberBound </code> Since : 1 . 8 
doubles <pre> public DoubleStream doubles ( long streamSize ) </pre> Returns a stream producing the given <code> streamSize </code> number of pseudorandom <code> double </code> values , each between zero ( inclusive ) and one ( exclusive ) . 
<p> A pseudorandom <code> double </code> value is generated as if it ' s the result of calling the method <code> nextDouble ( ) </code> . 
Parameters : <code> streamSize </code> - the number of values to generate Returns : a stream of <code> double </code> values Throws : <code> IllegalArgumentException </code> - if <code> streamSize </code> is less than zero Since : 1 . 8 
doubles <pre> public DoubleStream doubles ( ) </pre> Returns an effectively unlimited stream of pseudorandom <code> double </code> values , each between zero ( inclusive ) and one ( exclusive ) . 
<p> A pseudorandom <code> double </code> value is generated as if it ' s the result of calling the method <code> nextDouble ( ) </code> . 
Implementation Note : This method is implemented to be equivalent to <code> doubles ( Long . MAX _ VALUE ) </code> . Returns : a stream of pseudorandom <code> double </code> values Since : 1 . 8 
doubles <pre> public DoubleStream doubles ( long streamSize , double randomNumberOrigin , double randomNumberBound ) </pre> Returns a stream producing the given <code> streamSize </code> number of pseudorandom <code> double </code> values , each conforming to the given origin ( inclusive ) and bound ( exclusive ) . 
<p> A pseudorandom <code> double </code> value is generated as if it ' s the result of calling the following method with the origin and bound : <pre> <code> double nextDouble ( double origin , double bound ) { double r = nextDouble ( ) ; r = r * ( bound - origin ) + origin ; if ( r > = bound ) / / correct for rounding r = Math . nextDown ( bound ) ; return r ; } 
Parameters : <code> streamSize </code> - the number of values to generate <code> randomNumberOrigin </code> - the origin ( inclusive ) of each random value <code> randomNumberBound </code> - the bound ( exclusive ) of each random value Returns : a stream of pseudorandom <code> double </code> values , each with the given origin ( inclusive ) and bound ( exclusive ) Throws : <code> IllegalArgumentException </code> - if <code> streamSize </code> is less than zero <code> IllegalArgumentException </code> - if <code> randomNumberOrigin </code> is greater than or equal to <code> randomNumberBound </code> Since : 1 . 8 
doubles <pre> public DoubleStream doubles ( double randomNumberOrigin , double randomNumberBound ) </pre> Returns an effectively unlimited stream of pseudorandom <code> double </code> values , each conforming to the given origin ( inclusive ) and bound ( exclusive ) . 
<p> A pseudorandom <code> double </code> value is generated as if it ' s the result of calling the following method with the origin and bound : <pre> <code> double nextDouble ( double origin , double bound ) { double r = nextDouble ( ) ; r = r * ( bound - origin ) + origin ; if ( r > = bound ) / / correct for rounding r = Math . nextDown ( bound ) ; return r ; } 
Implementation Note : This method is implemented to be equivalent to <code> doubles ( Long . MAX _ VALUE , randomNumberOrigin , randomNumberBound ) </code> . Parameters : <code> randomNumberOrigin </code> - the origin ( inclusive ) of each random value <code> randomNumberBound </code> - the bound ( exclusive ) of each random value Returns : a stream of pseudorandom <code> double </code> values , each with the given origin ( inclusive ) and bound ( exclusive ) Throws : <code> IllegalArgumentException </code> - if <code> randomNumberOrigin </code> is greater than or equal to <code> randomNumberBound </code> Since : 1 . 8 
Skip navigation links 
Overview Package Class Use Tree Deprecated Index Help 
Javaâ„¢ PlatformStandard Ed . 8 
Prev Class Next Class 
Frames No Frames 
All Classes 
Summary : Nested | Field | Constr | Method 
Detail : Field | Constr | Method 
Submit a bug or feature For further API reference and developer documentation , see Java SE Documentation . 
That documentation contains more detailed , developer - targeted descriptions , with conceptual overviews , definitions of terms , workarounds , and working code examples . 
Copyright Â© 1993 , 2020 , Oracle and / or its affiliates . 
All rights reserved . 
Use is subject to license terms . 
Also see the documentation redistribution policy . 