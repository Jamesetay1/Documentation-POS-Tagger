<p> Given a linked list , swap every two adjacent nodes and return its head . </p> 
<p> </p> 
<p> Example 1 : </p> 
<pre> Input : head = [ 1 , 2 , 3 , 4 ] Output : [ 2 , 1 , 4 , 3 ] </pre> 
<p> Example 2 : </p> 
<pre> Input : head = [ ] Output : [ ] </pre> 
<p> Example 3 : </p> 
<pre> Input : head = [ 1 ] Output : [ 1 ] </pre> 
<p> </p> 
<p> Constraints : </p> 
The number of nodes in the list is in the range <code> [ 0 , 100 ] </code> . <code> 0 < = Node . val < = 100 </code> 
<p> </p> Follow up : Can you solve the problem without modifying the values in the list ' s nodes ? ( i . e . , Only nodes themselves may be changed . 