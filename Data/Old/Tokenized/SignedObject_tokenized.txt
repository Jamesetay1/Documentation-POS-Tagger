SignedObject ( Java Platform SE 8 ) 
JavaScript is disabled on your browser . 
Skip navigation links 
Overview Package Class Use Tree Deprecated Index Help 
Java™ PlatformStandard Ed . 8 
Prev Class Next Class 
Frames No Frames 
All Classes 
Summary : Nested | Field | Constr | Method 
Detail : Field | Constr | Method 
compact1 , compact2 , compact3 java . security Class SignedObject 
java . lang . 
Object 
java . security . 
SignedObject 
All Implemented Interfaces : Serializable 
<pre> public final class SignedObject extends Object implements Serializable </pre> 
<p> SignedObject is a class for the purpose of creating authentic runtime objects whose integrity cannot be compromised without being detected . 
<p> More specifically , a SignedObject contains another Serializable object , the ( to - be - ) signed object and its signature . 
<p> The signed object is a " deep copy " ( in serialized form ) of an original object . 
Once the copy is made , further manipulation of the original object has no side effect on the copy . 
<p> The underlying signing algorithm is designated by the Signature object passed to the constructor and the <code> verify </code> method . A typical usage for signing is the following : 
<pre> <code> Signature signingEngine = Signature . getInstance ( algorithm , provider ) ; SignedObject so = new SignedObject ( myobject , signingKey , signingEngine ) ; 
<p> A typical usage for verification is the following ( having received SignedObject <code> so </code> ) : 
<pre> <code> Signature verificationEngine = Signature . getInstance ( algorithm , provider ) ; if ( so . verify ( publickey , verificationEngine ) ) try { Object myobj = so . getObject ( ) ; } catch ( java . lang . ClassNotFoundException e ) { } ; 
<p> Several points are worth noting . First , there is no need to initialize the signing or verification engine , as it will be re - initialized inside the constructor and the <code> verify </code> method . 
Secondly , for verification to succeed , the specified public key must be the public key corresponding to the private key used to generate the SignedObject . 
<p> More importantly , for flexibility reasons , the constructor and <code> verify </code> method allow for customized signature engines , which can implement signature algorithms that are not installed formally as part of a crypto provider . 
However , it is crucial that the programmer writing the verifier code be aware what <code> Signature </code> engine is being used , as its own implementation of the <code> verify </code> method is invoked to verify a signature . 
In other words , a malicious <code> Signature </code> may choose to always return true on verification in an attempt to bypass a security check . 
<p> The signature algorithm can be , among others , the NIST standard DSA , using DSA and SHA - 256 . 
The algorithm is specified using the same convention as that for signatures . 
The DSA algorithm using the SHA - 256 message digest algorithm can be specified , for example , as " SHA256withDSA " . 
In the case of RSA the signing algorithm could be specified as , for example , " SHA256withRSA " . 
The algorithm name must be specified , as there is no default . 
<p> The name of the Cryptography Package Provider is designated also by the Signature parameter to the constructor and the <code> verify </code> method . 
If the provider is not specified , the default provider is used . 
Each installation can be configured to use a particular provider as default . 
<p> Potential applications of SignedObject include : 
It can be used internally to any Java runtime as an unforgeable authorization token - - one that can be passed around without the fear that the token can be maliciously modified without being detected . It can be used to sign and serialize data / object for storage outside the Java runtime ( e . g . , storing critical access control data on disk ) . Nested SignedObjects can be used to construct a logical sequence of signatures , resembling a chain of authorization and delegation . 
See Also : <code> Signature </code> , Serialized Form 
Constructor Summary 
Constructors 
Constructor and Description 
<code> SignedObject ( Serializable object , PrivateKey signingKey , Signature signingEngine ) </code> Constructs a SignedObject from any Serializable object . 
Method Summary 
All Methods Instance Methods Concrete Methods 
Modifier and Type Method and Description 
<code> String </code> <code> getAlgorithm ( ) </code> Retrieves the name of the signature algorithm . 
<code> Object </code> <code> getObject ( ) </code> Retrieves the encapsulated object . 
<code> byte [ ] </code> <code> getSignature ( ) </code> Retrieves the signature on the signed object , in the form of a byte array . 
<code> boolean </code> <code> verify ( PublicKey verificationKey , Signature verificationEngine ) </code> Verifies that the signature in this SignedObject is the valid signature for the object stored inside , with the given verification key , using the designated verification engine . 
Methods inherited from class java . lang . 
Object <code> clone , equals , finalize , getClass , hashCode , notify , notifyAll , toString , wait , wait , wait </code> 
Constructor Detail 
SignedObject <pre> public SignedObject ( Serializable object , PrivateKey signingKey , Signature signingEngine ) throws IOException , InvalidKeyException , SignatureException </pre> Constructs a SignedObject from any Serializable object . The given object is signed with the given signing key , using the designated signature engine . 
Parameters : <code> object </code> - the object to be signed . <code> signingKey </code> - the private key for signing . <code> signingEngine </code> - the signature signing engine . Throws : <code> IOException </code> - if an error occurs during serialization <code> InvalidKeyException </code> - if the key is invalid . <code> SignatureException </code> - if signing fails . 
Method Detail 
getObject <pre> public Object getObject ( ) throws IOException , ClassNotFoundException </pre> Retrieves the encapsulated object . The encapsulated object is de - serialized before it is returned . 
Returns : the encapsulated object . Throws : <code> IOException </code> - if an error occurs during de - serialization <code> ClassNotFoundException </code> - if an error occurs during de - serialization 
getSignature <pre> public byte [ ] getSignature ( ) </pre> Retrieves the signature on the signed object , in the form of a byte array . 
Returns : the signature . 
Returns a new array each time this method is called . 
getAlgorithm <pre> public String getAlgorithm ( ) </pre> Retrieves the name of the signature algorithm . 
Returns : the signature algorithm name . 
verify <pre> public boolean verify ( PublicKey verificationKey , Signature verificationEngine ) throws InvalidKeyException , SignatureException </pre> Verifies that the signature in this SignedObject is the valid signature for the object stored inside , with the given verification key , using the designated verification engine . 
Parameters : <code> verificationKey </code> - the public key for verification . <code> verificationEngine </code> - the signature verification engine . Returns : <code> true </code> if the signature is valid , <code> false </code> otherwise Throws : <code> SignatureException </code> - if signature verification failed . <code> InvalidKeyException </code> - if the verification key is invalid . 
Skip navigation links 
Overview Package Class Use Tree Deprecated Index Help 
Java™ PlatformStandard Ed . 8 
Prev Class Next Class 
Frames No Frames 
All Classes 
Summary : Nested | Field | Constr | Method 
Detail : Field | Constr | Method 
Submit a bug or feature For further API reference and developer documentation , see Java SE Documentation . 
That documentation contains more detailed , developer - targeted descriptions , with conceptual overviews , definitions of terms , workarounds , and working code examples . 
Copyright © 1993 , 2020 , Oracle and / or its affiliates . 
All rights reserved . 
Use is subject to license terms . 
Also see the documentation redistribution policy . 