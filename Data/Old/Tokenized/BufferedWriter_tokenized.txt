BufferedWriter ( Java Platform SE 8 ) 
JavaScript is disabled on your browser . 
Skip navigation links 
Overview Package Class Use Tree Deprecated Index Help 
Java™ PlatformStandard Ed . 8 
Prev Class Next Class 
Frames No Frames 
All Classes 
Summary : Nested | Field | Constr | Method 
Detail : Field | Constr | Method 
compact1 , compact2 , compact3 java . io Class BufferedWriter 
java . lang . 
Object 
java . io . 
Writer 
java . io . 
BufferedWriter 
All Implemented Interfaces : Closeable , Flushable , Appendable , AutoCloseable 
<pre> public class BufferedWriter extends Writer </pre> Writes text to a character - output stream , buffering characters so as to provide for the efficient writing of single characters , arrays , and strings . 
<p> The buffer size may be specified , or the default size may be accepted . The default is large enough for most purposes . 
<p> A newLine ( ) method is provided , which uses the platform ' s own notion of line separator as defined by the system property line . separator . Not all platforms use the newline character ( ' \ n ' ) to terminate lines . Calling this method to terminate each output line is therefore preferred to writing a newline character directly . 
<p> In general , a Writer sends its output immediately to the underlying character or byte stream . 
Unless prompt output is required , it is advisable to wrap a BufferedWriter around any Writer whose write ( ) operations may be costly , such as FileWriters and OutputStreamWriters . 
For example , 
<pre> PrintWriter out = new PrintWriter ( new BufferedWriter ( new FileWriter ( " foo . out " ) ) ) ; </pre> 
will buffer the PrintWriter ' s output to the file . 
Without buffering , each invocation of a print ( ) method would cause characters to be converted into bytes that would then be written immediately to the file , which can be very inefficient . 
Since : JDK1 . 1 See Also : <code> PrintWriter </code> , <code> FileWriter </code> , <code> OutputStreamWriter </code> , <code> Files . newBufferedWriter ( java . nio . file . Path , java . nio . charset . Charset , java . nio . file . OpenOption . . . ) </code> 
Field Summary 
Fields inherited from class java . io . 
Writer <code> lock </code> 
Constructor Summary 
Constructors 
Constructor and Description 
<code> BufferedWriter ( Writer out ) </code> Creates a buffered character - output stream that uses a default - sized output buffer . 
<code> BufferedWriter ( Writer out , int sz ) </code> Creates a new buffered character - output stream that uses an output buffer of the given size . 
Method Summary 
All Methods Instance Methods Concrete Methods 
Modifier and Type Method and Description 
<code> void </code> <code> close ( ) </code> Closes the stream , flushing it first . 
<code> void </code> <code> flush ( ) </code> Flushes the stream . 
<code> void </code> <code> newLine ( ) </code> Writes a line separator . 
<code> void </code> <code> write ( char [ ] cbuf , int off , int len ) </code> Writes a portion of an array of characters . 
<code> void </code> <code> write ( int c ) </code> Writes a single character . 
<code> void </code> <code> write ( String s , int off , int len ) </code> Writes a portion of a String . 
Methods inherited from class java . io . 
Writer <code> append , append , append , write , write </code> 
Methods inherited from class java . lang . 
Object <code> clone , equals , finalize , getClass , hashCode , notify , notifyAll , toString , wait , wait , wait </code> 
Constructor Detail 
BufferedWriter <pre> public BufferedWriter ( Writer out ) </pre> Creates a buffered character - output stream that uses a default - sized output buffer . 
Parameters : <code> out </code> - A Writer 
BufferedWriter <pre> public BufferedWriter ( Writer out , int sz ) </pre> Creates a new buffered character - output stream that uses an output buffer of the given size . 
Parameters : <code> out </code> - A Writer <code> sz </code> - Output - buffer size , a positive integer Throws : <code> IllegalArgumentException </code> - If <code> sz < = 0 </code> 
Method Detail 
write <pre> public void write ( int c ) throws IOException </pre> Writes a single character . 
Overrides : <code> write </code> in class <code> Writer </code> Parameters : <code> c </code> - int specifying a character to be written Throws : <code> IOException </code> - If an I / O error occurs 
write <pre> public void write ( char [ ] cbuf , int off , int len ) throws IOException </pre> Writes a portion of an array of characters . 
<p> Ordinarily this method stores characters from the given array into this stream ' s buffer , flushing the buffer to the underlying stream as needed . 
If the requested length is at least as large as the buffer , however , then this method will flush the buffer and write the characters directly to the underlying stream . 
Thus redundant <code> BufferedWriter </code> s will not copy data unnecessarily . 
Specified by : <code> write </code> in class <code> Writer </code> Parameters : <code> cbuf </code> - A character array <code> off </code> - Offset from which to start reading characters <code> len </code> - Number of characters to write Throws : <code> IOException </code> - If an I / O error occurs 
write <pre> public void write ( String s , int off , int len ) throws IOException </pre> Writes a portion of a String . 
<p> If the value of the len parameter is negative then no characters are written . 
This is contrary to the specification of this method in the superclass , which requires that an <code> IndexOutOfBoundsException </code> be thrown . 
Overrides : <code> write </code> in class <code> Writer </code> Parameters : <code> s </code> - String to be written <code> off </code> - Offset from which to start reading characters <code> len </code> - Number of characters to be written Throws : <code> IOException </code> - If an I / O error occurs 
newLine <pre> public void newLine ( ) throws IOException </pre> Writes a line separator . 
The line separator string is defined by the system property line . separator , and is not necessarily a single newline ( ' \ n ' ) character . 
Throws : <code> IOException </code> - If an I / O error occurs 
flush <pre> public void flush ( ) throws IOException </pre> Flushes the stream . 
Specified by : <code> flush </code> in interface <code> Flushable </code> Specified by : <code> flush </code> in class <code> Writer </code> Throws : <code> IOException </code> - If an I / O error occurs 
close <pre> public void close ( ) throws IOException </pre> Description copied from class : <code> Writer </code> Closes the stream , flushing it first . 
Once the stream has been closed , further write ( ) or flush ( ) invocations will cause an IOException to be thrown . 
Closing a previously closed stream has no effect . 
Specified by : <code> close </code> in interface <code> Closeable </code> Specified by : <code> close </code> in interface <code> AutoCloseable </code> Specified by : <code> close </code> in class <code> Writer </code> Throws : <code> IOException </code> - If an I / O error occurs 
Skip navigation links 
Overview Package Class Use Tree Deprecated Index Help 
Java™ PlatformStandard Ed . 8 
Prev Class Next Class 
Frames No Frames 
All Classes 
Summary : Nested | Field | Constr | Method 
Detail : Field | Constr | Method 
Submit a bug or feature For further API reference and developer documentation , see Java SE Documentation . 
That documentation contains more detailed , developer - targeted descriptions , with conceptual overviews , definitions of terms , workarounds , and working code examples . 
Copyright © 1993 , 2020 , Oracle and / or its affiliates . 
All rights reserved . 
Use is subject to license terms . 
Also see the documentation redistribution policy . 