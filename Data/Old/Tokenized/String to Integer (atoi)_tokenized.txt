<p> Implement the <code> myAtoi ( string s ) </code> function , which converts a string to a 32 - bit signed integer ( similar to C / C + + ' s <code> atoi </code> function ) . </p> 
<p> The algorithm for <code> myAtoi ( string s ) </code> is as follows : </p> 
Read in and ignore any leading whitespace . Check if the next character ( if not already at the end of the string ) is <code> ' - ' </code> or <code> ' + ' </code> . 
Read this character in if it is either . 
This determines if the final result is negative or positive respectively . 
Assume the result is positive if neither is present . Read in next the characters until the next non - digit charcter or the end of the input is reached . 
The rest of the string is ignored . Convert these digits into an integer ( i . e . <code> " 123 " - > 123 </code> , <code> " 0032 " - > 32 </code> ) . 
If no digits were read , then the integer is <code> 0 </code> . 
Change the sign as necessary ( from step 2 ) . If the integer is out of the 32 - bit signed integer range <code> [ - 231 , 231 - 1 ] </code> , then clamp the integer so that it remains in the range . 
Specifically , integers less than <code> - 231 </code> should be clamped to <code> - 231 </code> , and integers greater than <code> 231 - 1 </code> should be clamped to <code> 231 - 1 </code> . Return the integer as the final result . 
<p> Note : </p> 
Only the space character <code> ' ' </code> is considered a whitespace character . Do not ignore any characters other than the leading whitespace or the rest of the string after the digits . 
<p> </p> 
<p> Example 1 : </p> 
<pre> Input : s = " 42 " Output : 42 Explanation : The underlined characters are what is read in , the caret is the current reader position . Step 1 : " 42 " ( no characters read because there is no leading whitespace ) ^ Step 2 : " 42 " ( no characters read because there is neither a ' - ' nor ' + ' ) ^ Step 3 : " 42 " ( " 42 " is read in ) ^ The parsed integer is 42 . Since 42 is in the range [ - 231 , 231 - 1 ] , the final result is 42 . </pre> 
<p> Example 2 : </p> 
<pre> Input : s = " - 42 " Output : - 42 Explanation : Step 1 : " - 42 " ( leading whitespace is read and ignored ) ^ Step 2 : " - 42 " ( ' - ' is read , so the result should be negative ) ^ Step 3 : " - 42 " ( " 42 " is read in ) ^ The parsed integer is - 42 . Since - 42 is in the range [ - 231 , 231 - 1 ] , the final result is - 42 . </pre> 
<p> Example 3 : </p> 
<pre> Input : s = " 4193 with words " Output : 4193 Explanation : Step 1 : " 4193 with words " ( no characters read because there is no leading whitespace ) ^ Step 2 : " 4193 with words " ( no characters read because there is neither a ' - ' nor ' + ' ) ^ Step 3 : " 4193 with words " ( " 4193 " is read in ; reading stops because the next character is a non - digit ) ^ The parsed integer is 4193 . Since 4193 is in the range [ - 231 , 231 - 1 ] , the final result is 4193 . </pre> 
<p> Example 4 : </p> 
<pre> Input : s = " words and 987 " Output : 0 Explanation : Step 1 : " words and 987 " ( no characters read because there is no leading whitespace ) ^ Step 2 : " words and 987 " ( no characters read because there is neither a ' - ' nor ' + ' ) ^ Step 3 : " words and 987 " ( reading stops immediately because there is a non - digit ' w ' ) ^ The parsed integer is 0 because no digits were read . Since 0 is in the range [ - 231 , 231 - 1 ] , the final result is 0 . </pre> 
<p> Example 5 : </p> 
<pre> Input : s = " - 91283472332 " Output : - 2147483648 Explanation : Step 1 : " - 91283472332 " ( no characters read because there is no leading whitespace ) ^ Step 2 : " - 91283472332 " ( ' - ' is read , so the result should be negative ) ^ Step 3 : " - 91283472332 " ( " 91283472332 " is read in ) ^ The parsed integer is - 91283472332 . Since - 91283472332 is less than the lower bound of the range [ - 231 , 231 - 1 ] , the final result is clamped to - 231 = - 2147483648 . </pre> 
<p> </p> 
<p> Constraints : </p> 
<code> 0 < = s . length < = 200 </code> <code> s </code> consists of English letters ( lower - case and upper - case ) , digits ( <code> 0 - 9 </code> ) , <code> ' ' </code> , <code> ' + ' </code> , <code> ' - ' </code> , and <code> ' . ' </code> . 