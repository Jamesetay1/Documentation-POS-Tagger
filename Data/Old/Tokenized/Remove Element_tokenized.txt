<p> Given an array <em> nums </em> and a value <code> val </code> , remove all instances of that value in - place and return the new length . </p> 
<p> Do not allocate extra space for another array , you must do this by modifying the input array in - place with <code> O ( 1 ) </code> extra memory . </p> 
<p> The order of elements can be changed . 
It doesn ' t matter what you leave beyond the new length . </p> 
<p> Clarification : </p> 
<p> Confused why the returned value is an integer but your answer is an array ? </p> 
<p> Note that the input array is passed in by reference , which means a modification to the input array will be known to the caller as well . </p> 
<p> Internally you can think of this : </p> 
<pre> / / nums is passed in by reference . ( i . e . , without making a copy ) int len = removeElement ( nums , val ) ; 
/ / any modification to nums in your function would be known by the caller . / / using the length returned by your function , it prints the first len elements . for ( int i = 0 ; i < len ; i + + ) { print ( nums [ i ] ) ; } </pre> 
<p> </p> 
<p> Example 1 : </p> 
<pre> Input : nums = [ 3 , 2 , 2 , 3 ] , val = 3 Output : 2 , nums = [ 2 , 2 ] Explanation : Your function should return length = 2 , with the first two elements of <em> nums </em> being 2 . It doesn ' t matter what you leave beyond the returned length . 
For example if you return 2 with nums = [ 2 , 2 , 3 , 3 ] or nums = [ 2 , 2 , 0 , 0 ] , your answer will be accepted . </pre> 
<p> Example 2 : </p> 
<pre> Input : nums = [ 0 , 1 , 2 , 2 , 3 , 0 , 4 , 2 ] , val = 2 Output : 5 , nums = [ 0 , 1 , 4 , 0 , 3 ] Explanation : Your function should return length = <code> 5 </code> , with the first five elements of <em> <code> nums </code> </em> containing <code> 0 </code> , <code> 1 </code> , <code> 3 </code> , <code> 0 </code> , and 4 . 
Note that the order of those five elements can be arbitrary . 
It doesn ' t matter what values are set beyond the returned length . </pre> 
<p> </p> 
<p> Constraints : </p> 
<code> 0 < = nums . length < = 100 </code> <code> 0 < = nums [ i ] < = 50 </code> <code> 0 < = val < = 100 </code> 