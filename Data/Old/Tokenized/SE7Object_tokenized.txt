Object ( Java Platform SE 7 ) 
JavaScript is disabled on your browser . 
Overview Package Class Use Tree Deprecated Index Help 
<em> Java™ PlatformStandard Ed . 7 </em> 
Prev Class Next Class 
Frames No Frames 
All Classes 
Summary : Nested | Field | Constr | Method 
Detail : Field | Constr | Method 
java . lang Class Object 
java . lang . 
Object 
<pre> public class Object </pre> Class <code> Object </code> is the root of the class hierarchy . Every class has <code> Object </code> as a superclass . 
All objects , including arrays , implement the methods of this class . Since : JDK1 . 0 See Also : <code> Class </code> 
Constructor Summary 
Constructors 
Constructor and Description 
<code> Object ( ) </code> 
Method Summary 
Methods 
Modifier and Type Method and Description 
<code> protected Object </code> <code> clone ( ) </code> Creates and returns a copy of this object . 
<code> boolean </code> <code> equals ( Object obj ) </code> Indicates whether some other object is " equal to " this one . 
<code> protected void </code> <code> finalize ( ) </code> Called by the garbage collector on an object when garbage collection determines that there are no more references to the object . 
<code> Class <code> getClass ( ) </code> Returns the runtime class of this <code> Object </code> . 
<code> int </code> <code> hashCode ( ) </code> Returns a hash code value for the object . 
<code> void </code> <code> notify ( ) </code> Wakes up a single thread that is waiting on this object ' s monitor . 
<code> void </code> <code> notifyAll ( ) </code> Wakes up all threads that are waiting on this object ' s monitor . 
<code> String </code> <code> toString ( ) </code> Returns a string representation of the object . 
<code> void </code> <code> wait ( ) </code> Causes the current thread to wait until another thread invokes the <code> notify ( ) </code> method or the <code> notifyAll ( ) </code> method for this object . 
<code> void </code> <code> wait ( long timeout ) </code> Causes the current thread to wait until either another thread invokes the <code> notify ( ) </code> method or the <code> notifyAll ( ) </code> method for this object , or a specified amount of time has elapsed . 
<code> void </code> <code> wait ( long timeout , int nanos ) </code> Causes the current thread to wait until another thread invokes the <code> notify ( ) </code> method or the <code> notifyAll ( ) </code> method for this object , or some other thread interrupts the current thread , or a certain amount of real time has elapsed . 
Constructor Detail 
Object <pre> public Object ( ) </pre> 
Method Detail 
getClass <pre> public final Class <?> getClass ( ) </pre> Returns the runtime class of this <code> Object </code> . 
The returned <code> Class </code> object is the object that is locked by <code> static synchronized </code> methods of the represented class . 
<p> The actual result type is <code> Class < ? extends | X | > </code> where <code> | X | </code> is the erasure of the static type of the expression on which <code> getClass </code> is called . 
For example , no cast is required in this code fragment : </p> 
<p> <code> Number n = 0 ; </code> <code> Class < ? extends Number > c = n . getClass ( ) ; </code> </p> Returns : The <code> Class </code> object that represents the runtime class of this object . 
See Also : <code> Literals , section 15 . 8 . 2 of The Java™ Language Specification . </code> 
hashCode <pre> public int hashCode ( ) </pre> Returns a hash code value for the object . 
This method is supported for the benefit of hash tables such as those provided by <code> HashMap </code> . 
<p> The general contract of <code> hashCode </code> is : </p> Whenever it is invoked on the same object more than once during an execution of a Java application , the <code> hashCode </code> method must consistently return the same integer , provided no information used in <code> equals </code> comparisons on the object is modified . This integer need not remain consistent from one execution of an application to another execution of the same application . If two objects are equal according to the <code> equals ( Object ) </code> method , then calling the <code> hashCode </code> method on each of the two objects must produce the same integer result . It is <em> not </em> required that if two objects are unequal according to the <code> equals ( java . lang . Object ) </code> method , then calling the <code> hashCode </code> method on each of the two objects must produce distinct integer results . 
However , the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables . 
<p> As much as is reasonably practical , the hashCode method defined by class <code> Object </code> does return distinct integers for distinct objects . ( This is typically implemented by converting the internal address of the object into an integer , but this implementation technique is not required by the JavaTM programming language . ) </p> Returns : a hash code value for this object . 
See Also : <code> equals ( java . lang . Object ) </code> , <code> System . identityHashCode ( java . lang . Object ) </code> 
equals <pre> public boolean equals ( Object obj ) </pre> Indicates whether some other object is " equal to " this one . 
<p> The <code> equals </code> method implements an equivalence relation on non - null object references : </p> It is reflexive : for any non - null reference value <code> x </code> , <code> x . equals ( x ) </code> should return <code> true </code> . It is symmetric : for any non - null reference values <code> x </code> and <code> y </code> , <code> x . equals ( y ) </code> should return <code> true </code> if and only if <code> y . equals ( x ) </code> returns <code> true </code> . It is transitive : for any non - null reference values <code> x </code> , <code> y </code> , and <code> z </code> , if <code> x . equals ( y ) </code> returns <code> true </code> and <code> y . equals ( z ) </code> returns <code> true </code> , then <code> x . equals ( z ) </code> should return <code> true </code> . It is consistent : for any non - null reference values <code> x </code> and <code> y </code> , multiple invocations of <code> x . equals ( y ) </code> consistently return <code> true </code> or consistently return <code> false </code> , provided no information used in <code> equals </code> comparisons on the objects is modified . For any non - null reference value <code> x </code> , <code> x . equals ( null ) </code> should return <code> false </code> . 
<p> The <code> equals </code> method for class <code> Object </code> implements the most discriminating possible equivalence relation on objects ; that is , for any non - null reference values <code> x </code> and <code> y </code> , this method returns <code> true </code> if and only if <code> x </code> and <code> y </code> refer to the same object ( <code> x = = y </code> has the value <code> true </code> ) . </p> 
<p> Note that it is generally necessary to override the <code> hashCode </code> method whenever this method is overridden , so as to maintain the general contract for the <code> hashCode </code> method , which states that equal objects must have equal hash codes . </p> Parameters : <code> obj </code> - the reference object with which to compare . Returns : <code> true </code> if this object is the same as the obj argument ; <code> false </code> otherwise . 
See Also : <code> hashCode ( ) </code> , <code> HashMap </code> 
clone <pre> protected Object clone ( ) throws CloneNotSupportedException </pre> Creates and returns a copy of this object . 
The precise meaning of " copy " may depend on the class of the object . 
The general intent is that , for any object <code> x </code> , the expression : 
<pre> x . clone ( ) ! = x </pre> will be true , and that the expression : 
<pre> x . clone ( ) . getClass ( ) = = x . getClass ( ) </pre> will be <code> true </code> , but these are not absolute requirements . While it is typically the case that : 
<pre> x . clone ( ) . equals ( x ) </pre> will be <code> true </code> , this is not an absolute requirement . 
<p> By convention , the returned object should be obtained by calling <code> super . clone </code> . 
If a class and all of its superclasses ( except <code> Object </code> ) obey this convention , it will be the case that <code> x . clone ( ) . getClass ( ) = = x . getClass ( ) </code> . </p> 
<p> By convention , the object returned by this method should be independent of this object ( which is being cloned ) . 
To achieve this independence , it may be necessary to modify one or more fields of the object returned by <code> super . clone </code> before returning it . 
Typically , this means copying any mutable objects that comprise the internal " deep structure " of the object being cloned and replacing the references to these objects with references to the copies . 
If a class contains only primitive fields or references to immutable objects , then it is usually the case that no fields in the object returned by <code> super . clone </code> need to be modified . </p> 
<p> The method <code> clone </code> for class <code> Object </code> performs a specific cloning operation . 
First , if the class of this object does not implement the interface <code> Cloneable </code> , then a <code> CloneNotSupportedException </code> is thrown . 
Note that all arrays are considered to implement the interface <code> Cloneable </code> and that the return type of the <code> clone </code> method of an array type <code> T [ ] </code> is <code> T [ ] </code> where T is any reference or primitive type . Otherwise , this method creates a new instance of the class of this object and initializes all its fields with exactly the contents of the corresponding fields of this object , as if by assignment ; the contents of the fields are not themselves cloned . 
Thus , this method performs a " shallow copy " of this object , not a " deep copy " operation . </p> 
<p> The class <code> Object </code> does not itself implement the interface <code> Cloneable </code> , so calling the <code> clone </code> method on an object whose class is <code> Object </code> will result in throwing an exception at run time . </p> Returns : a clone of this instance . Throws : <code> CloneNotSupportedException </code> - if the object ' s class does not support the <code> Cloneable </code> interface . 
Subclasses that override the <code> clone </code> method can also throw this exception to indicate that an instance cannot be cloned . 
See Also : <code> Cloneable </code> 
toString <pre> public String toString ( ) </pre> Returns a string representation of the object . 
In general , the <code> toString </code> method returns a string that " textually represents " this object . 
The result should be a concise but informative representation that is easy for a person to read . It is recommended that all subclasses override this method . 
<p> The <code> toString </code> method for class <code> Object </code> returns a string consisting of the name of the class of which the object is an instance , the at - sign character ` <code> @ </code> ' , and the unsigned hexadecimal representation of the hash code of the object . 
In other words , this method returns a string equal to the value of : </p> <pre> getClass ( ) . getName ( ) + ' @ ' + Integer . toHexString ( hashCode ( ) ) </pre> Returns : a string representation of the object . 
notify <pre> public final void notify ( ) </pre> Wakes up a single thread that is waiting on this object ' s monitor . 
If any threads are waiting on this object , one of them is chosen to be awakened . 
The choice is arbitrary and occurs at the discretion of the implementation . 
A thread waits on an object ' s monitor by calling one of the <code> wait </code> methods . 
<p> The awakened thread will not be able to proceed until the current thread relinquishes the lock on this object . 
The awakened thread will compete in the usual manner with any other threads that might be actively competing to synchronize on this object ; for example , the awakened thread enjoys no reliable privilege or disadvantage in being the next thread to lock this object . </p> 
<p> This method should only be called by a thread that is the owner of this object ' s monitor . 
A thread becomes the owner of the object ' s monitor in one of three ways : </p> By executing a synchronized instance method of that object . By executing the body of a <code> synchronized </code> statement that synchronizes on the object . For objects of type <code> Class , </code> by executing a synchronized static method of that class . 
<p> Only one thread at a time can own an object ' s monitor . </p> Throws : <code> IllegalMonitorStateException </code> - if the current thread is not the owner of this object ' s monitor . 
See Also : <code> notifyAll ( ) </code> , <code> wait ( ) </code> 
notifyAll <pre> public final void notifyAll ( ) </pre> Wakes up all threads that are waiting on this object ' s monitor . 
A thread waits on an object ' s monitor by calling one of the <code> wait </code> methods . 
<p> The awakened threads will not be able to proceed until the current thread relinquishes the lock on this object . 
The awakened threads will compete in the usual manner with any other threads that might be actively competing to synchronize on this object ; for example , the awakened threads enjoy no reliable privilege or disadvantage in being the next thread to lock this object . </p> 
<p> This method should only be called by a thread that is the owner of this object ' s monitor . 
See the <code> notify </code> method for a description of the ways in which a thread can become the owner of a monitor . </p> Throws : <code> IllegalMonitorStateException </code> - if the current thread is not the owner of this object ' s monitor . 
See Also : <code> notify ( ) </code> , <code> wait ( ) </code> 
wait <pre> public final void wait ( long timeout ) throws InterruptedException </pre> Causes the current thread to wait until either another thread invokes the <code> notify ( ) </code> method or the <code> notifyAll ( ) </code> method for this object , or a specified amount of time has elapsed . 
<p> The current thread must own this object ' s monitor . </p> 
<p> This method causes the current thread ( call it T ) to place itself in the wait set for this object and then to relinquish any and all synchronization claims on this object . 
Thread T becomes disabled for thread scheduling purposes and lies dormant until one of four things happens : </p> Some other thread invokes the <code> notify </code> method for this object and thread T happens to be arbitrarily chosen as the thread to be awakened . Some other thread invokes the <code> notifyAll </code> method for this object . Some other thread interrupts thread T . The specified amount of real time has elapsed , more or less . 
If <code> timeout </code> is zero , however , then real time is not taken into consideration and the thread simply waits until notified . 
The thread T is then removed from the wait set for this object and re - enabled for thread scheduling . 
It then competes in the usual manner with other threads for the right to synchronize on the object ; once it has gained control of the object , all its synchronization claims on the object are restored to the status quo ante - that is , to the situation as of the time that the <code> wait </code> method was invoked . 
Thread T then returns from the invocation of the <code> wait </code> method . 
Thus , on return from the <code> wait </code> method , the synchronization state of the object and of thread <code> T </code> is exactly as it was when the <code> wait </code> method was invoked . 
<p> A thread can also wake up without being notified , interrupted , or timing out , a so - called spurious wakeup . 
While this will rarely occur in practice , applications must guard against it by testing for the condition that should have caused the thread to be awakened , and continuing to wait if the condition is not satisfied . 
In other words , waits should always occur in loops , like this one : </p> <pre> synchronized ( obj ) { while ( < condition does not hold > ) obj . wait ( timeout ) ; . . . / / Perform action appropriate to condition } </pre> ( For more information on this topic , see Section 3 . 2 . 3 in Doug Lea ' s " Concurrent Programming in Java ( Second Edition ) " ( Addison - Wesley , 2000 ) , or Item 50 in Joshua Bloch ' s " Effective Java Programming Language Guide " ( Addison - Wesley , 2001 ) . 
<p> If the current thread is interrupted by any thread before or while it is waiting , then an <code> InterruptedException </code> is thrown . 
This exception is not thrown until the lock status of this object has been restored as described above . 
</p> 
<p> Note that the <code> wait </code> method , as it places the current thread into the wait set for this object , unlocks only this object ; any other objects on which the current thread may be synchronized remain locked while the thread waits . </p> 
<p> This method should only be called by a thread that is the owner of this object ' s monitor . 
See the <code> notify </code> method for a description of the ways in which a thread can become the owner of a monitor . </p> Parameters : <code> timeout </code> - the maximum time to wait in milliseconds . Throws : <code> IllegalArgumentException </code> - if the value of timeout is negative . <code> IllegalMonitorStateException </code> - if the current thread is not the owner of the object ' s monitor . <code> InterruptedException </code> - if any thread interrupted the current thread before or while the current thread was waiting for a notification . 
The interrupted status of the current thread is cleared when this exception is thrown . 
See Also : <code> notify ( ) </code> , <code> notifyAll ( ) </code> 
wait <pre> public final void wait ( long timeout , int nanos ) throws InterruptedException </pre> Causes the current thread to wait until another thread invokes the <code> notify ( ) </code> method or the <code> notifyAll ( ) </code> method for this object , or some other thread interrupts the current thread , or a certain amount of real time has elapsed . 
<p> This method is similar to the <code> wait </code> method of one argument , but it allows finer control over the amount of time to wait for a notification before giving up . 
The amount of real time , measured in nanoseconds , is given by : </p> <pre> 1000000 * timeout + nanos </pre> 
<p> In all other respects , this method does the same thing as the method <code> wait ( long ) </code> of one argument . 
In particular , <code> wait ( 0 , 0 ) </code> means the same thing as <code> wait ( 0 ) </code> . </p> 
<p> The current thread must own this object ' s monitor . 
The thread releases ownership of this monitor and waits until either of the following two conditions has occurred : </p> Another thread notifies threads waiting on this object ' s monitor to wake up either through a call to the <code> notify </code> method or the <code> notifyAll </code> method . The timeout period , specified by <code> timeout </code> milliseconds plus <code> nanos </code> nanoseconds arguments , has elapsed . 
<p> The thread then waits until it can re - obtain ownership of the monitor and resumes execution . </p> 
<p> As in the one argument version , interrupts and spurious wakeups are possible , and this method should always be used in a loop : </p> <pre> synchronized ( obj ) { while ( < condition does not hold > ) obj . wait ( timeout , nanos ) ; . . . / / Perform action appropriate to condition } </pre> This method should only be called by a thread that is the owner of this object ' s monitor . 
See the <code> notify </code> method for a description of the ways in which a thread can become the owner of a monitor . Parameters : <code> timeout </code> - the maximum time to wait in milliseconds . <code> nanos </code> - additional time , in nanoseconds range 0 - 999999 . Throws : <code> IllegalArgumentException </code> - if the value of timeout is negative or the value of nanos is not in the range 0 - 999999 . <code> IllegalMonitorStateException </code> - if the current thread is not the owner of this object ' s monitor . <code> InterruptedException </code> - if any thread interrupted the current thread before or while the current thread was waiting for a notification . 
The interrupted status of the current thread is cleared when this exception is thrown . 
wait <pre> public final void wait ( ) throws InterruptedException </pre> Causes the current thread to wait until another thread invokes the <code> notify ( ) </code> method or the <code> notifyAll ( ) </code> method for this object . In other words , this method behaves exactly as if it simply performs the call <code> wait ( 0 ) </code> . 
<p> The current thread must own this object ' s monitor . 
The thread releases ownership of this monitor and waits until another thread notifies threads waiting on this object ' s monitor to wake up either through a call to the <code> notify </code> method or the <code> notifyAll </code> method . 
The thread then waits until it can re - obtain ownership of the monitor and resumes execution . </p> 
<p> As in the one argument version , interrupts and spurious wakeups are possible , and this method should always be used in a loop : </p> <pre> synchronized ( obj ) { while ( < condition does not hold > ) obj . wait ( ) ; . . . / / Perform action appropriate to condition } </pre> This method should only be called by a thread that is the owner of this object ' s monitor . 
See the <code> notify </code> method for a description of the ways in which a thread can become the owner of a monitor . Throws : <code> IllegalMonitorStateException </code> - if the current thread is not the owner of the object ' s monitor . <code> InterruptedException </code> - if any thread interrupted the current thread before or while the current thread was waiting for a notification . 
The interrupted status of the current thread is cleared when this exception is thrown . 
See Also : <code> notify ( ) </code> , <code> notifyAll ( ) </code> 
finalize <pre> protected void finalize ( ) throws Throwable </pre> Called by the garbage collector on an object when garbage collection determines that there are no more references to the object . A subclass overrides the <code> finalize </code> method to dispose of system resources or to perform other cleanup . 
<p> The general contract of <code> finalize </code> is that it is invoked if and when the JavaTM virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died , except as a result of an action taken by the finalization of some other object or class which is ready to be finalized . 
The <code> finalize </code> method may take any action , including making this object available again to other threads ; the usual purpose of <code> finalize </code> , however , is to perform cleanup actions before the object is irrevocably discarded . 
For example , the finalize method for an object that represents an input / output connection might perform explicit I / O transactions to break the connection before the object is permanently discarded . </p> 
<p> The <code> finalize </code> method of class <code> Object </code> performs no special action ; it simply returns normally . 
Subclasses of <code> Object </code> may override this definition . </p> 
<p> The Java programming language does not guarantee which thread will invoke the <code> finalize </code> method for any given object . 
It is guaranteed , however , that the thread that invokes finalize will not be holding any user - visible synchronization locks when finalize is invoked . 
If an uncaught exception is thrown by the finalize method , the exception is ignored and finalization of that object terminates . </p> 
<p> After the <code> finalize </code> method has been invoked for an object , no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died , including possible actions by other objects or classes which are ready to be finalized , at which point the object may be discarded . </p> 
<p> The <code> finalize </code> method is never invoked more than once by a Java virtual machine for any given object . </p> 
<p> Any exception thrown by the <code> finalize </code> method causes the finalization of this object to be halted , but is otherwise ignored . </p> Throws : <code> Throwable </code> - the <code> Exception </code> raised by this method 
Overview Package Class Use Tree Deprecated Index Help 
<em> Java™ PlatformStandard Ed . 7 </em> 
Prev Class Next Class 
Frames No Frames 
All Classes 
Summary : Nested | Field | Constr | Method 
Detail : Field | Constr | Method 
Submit a bug or feature For further API reference and developer documentation , see Java SE Documentation . 
That documentation contains more detailed , developer - targeted descriptions , with conceptual overviews , definitions of terms , workarounds , and working code examples . 
Copyright © 1993 , 2020 , Oracle and / or its affiliates . 
All rights reserved . 
Use is subject to license terms . 
Also see the documentation redistribution policy . 
Modify Cookie Preferences . 
Modify Ad Choices . </p> 
<p> Scripting on this page tracks web page traffic , but does not change the content in any way . 