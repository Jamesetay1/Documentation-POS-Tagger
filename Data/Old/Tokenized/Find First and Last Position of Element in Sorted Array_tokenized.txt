<p> Given an array of integers <code> nums </code> sorted in ascending order , find the starting and ending position of a given <code> target </code> value . </p> 
<p> If <code> target </code> is not found in the array , return <code> [ - 1 , - 1 ] </code> . </p> 
<p> Follow up : Could you write an algorithm with <code> O ( log n ) </code> runtime complexity ? </p> 
<p> </p> 
<p> Example 1 : </p> <pre> Input : nums = [ 5 , 7 , 7 , 8 , 8 , 10 ] , target = 8 Output : [ 3 , 4 ] </pre> 
<p> Example 2 : </p> <pre> Input : nums = [ 5 , 7 , 7 , 8 , 8 , 10 ] , target = 6 Output : [ - 1 , - 1 ] </pre> 
<p> Example 3 : </p> <pre> Input : nums = [ ] , target = 0 Output : [ - 1 , - 1 ] </pre> 
<p> </p> 
<p> Constraints : </p> 
<code> 0 < = nums . length < = 105 </code> <code> - 109 < = nums [ i ] < = 109 </code> <code> nums </code> is a non - decreasing array . <code> - 109 < = target < = 109 </code> 