Queue ( Java Platform SE 8 ) 
JavaScript is disabled on your browser . 
Skip navigation links 
Overview Package Class Use Tree Deprecated Index Help 
Java™ PlatformStandard Ed . 8 
Prev Class Next Class 
Frames No Frames 
All Classes 
Summary : Nested | Field | Constr | Method 
Detail : Field | Constr | Method 
compact1 , compact2 , compact3 java . util Interface Queue <E> 
Type Parameters : <code> E </code> - the type of elements held in this collection 
All Superinterfaces : Collection <E> , Iterable <E> 
All Known Subinterfaces : BlockingDeque <E> , BlockingQueue <E> , Deque <E> , TransferQueue <E> 
All Known Implementing Classes : AbstractQueue , ArrayBlockingQueue , ArrayDeque , ConcurrentLinkedDeque , ConcurrentLinkedQueue , DelayQueue , LinkedBlockingDeque , LinkedBlockingQueue , LinkedList , LinkedTransferQueue , PriorityBlockingQueue , PriorityQueue , SynchronousQueue 
<pre> public interface Queue <E> extends Collection A collection designed for holding elements prior to processing . Besides basic <code> Collection </code> operations , queues provide additional insertion , extraction , and inspection operations . 
Each of these methods exists in two forms : one throws an exception if the operation fails , the other returns a special value ( either <code> null </code> or <code> false </code> , depending on the operation ) . 
The latter form of the insert operation is designed specifically for use with capacity - restricted <code> Queue </code> implementations ; in most implementations , insert operations cannot fail . 
Summary of Queue methods 
<em> Throws exception </em> <em> Returns special value </em> 
Insert <code> add ( e ) </code> <code> offer ( e ) </code> 
Remove <code> remove ( ) </code> <code> poll ( ) </code> 
Examine <code> element ( ) </code> <code> peek ( ) </code> 
<p> Queues typically , but do not necessarily , order elements in a FIFO ( first - in - first - out ) manner . 
Among the exceptions are priority queues , which order elements according to a supplied comparator , or the elements ' natural ordering , and LIFO queues ( or stacks ) which order the elements LIFO ( last - in - first - out ) . Whatever the ordering used , the <em> head </em> of the queue is that element which would be removed by a call to <code> remove ( ) </code> or <code> poll ( ) </code> . 
In a FIFO queue , all new elements are inserted at the <em> tail </em> of the queue . 
Other kinds of queues may use different placement rules . 
Every <code> Queue </code> implementation must specify its ordering properties . 
<p> The <code> offer </code> method inserts an element if possible , otherwise returning <code> false </code> . 
This differs from the <code> Collection . add </code> method , which can fail to add an element only by throwing an unchecked exception . 
The <code> offer </code> method is designed for use when failure is a normal , rather than exceptional occurrence , for example , in fixed - capacity ( or " bounded " ) queues . 
<p> The <code> remove ( ) </code> and <code> poll ( ) </code> methods remove and return the head of the queue . Exactly which element is removed from the queue is a function of the queue ' s ordering policy , which differs from implementation to implementation . 
The <code> remove ( ) </code> and <code> poll ( ) </code> methods differ only in their behavior when the queue is empty : the <code> remove ( ) </code> method throws an exception , while the <code> poll ( ) </code> method returns <code> null </code> . 
<p> The <code> element ( ) </code> and <code> peek ( ) </code> methods return , but do not remove , the head of the queue . 
<p> The <code> Queue </code> interface does not define the blocking queue methods , which are common in concurrent programming . 
These methods , which wait for elements to appear or for space to become available , are defined in the <code> BlockingQueue </code> interface , which extends this interface . 
<p> <code> Queue </code> implementations generally do not allow insertion of <code> null </code> elements , although some implementations , such as <code> LinkedList </code> , do not prohibit insertion of <code> null </code> . Even in the implementations that permit it , <code> null </code> should not be inserted into a <code> Queue </code> , as <code> null </code> is also used as a special return value by the <code> poll </code> method to indicate that the queue contains no elements . 
<p> <code> Queue </code> implementations generally do not define element - based versions of methods <code> equals </code> and <code> hashCode </code> but instead inherit the identity based versions from class <code> Object </code> , because element - based equality is not always well - defined for queues with the same elements but different ordering properties . 
<p> This interface is a member of the 
Java Collections Framework . 
Since : 1 . 5 See Also : <code> Collection </code> , <code> LinkedList </code> , <code> PriorityQueue </code> , <code> LinkedBlockingQueue </code> , <code> BlockingQueue </code> , <code> ArrayBlockingQueue </code> , <code> LinkedBlockingQueue </code> , <code> PriorityBlockingQueue </code> 
Method Summary 
All Methods Instance Methods Abstract Methods 
Modifier and Type Method and Description 
<code> boolean </code> <code> add ( E e ) </code> Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions , returning <code> true </code> upon success and throwing an <code> IllegalStateException </code> if no space is currently available . 
<code> E </code> <code> element ( ) </code> Retrieves , but does not remove , the head of this queue . 
<code> boolean </code> <code> offer ( E e ) </code> Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions . 
<code> E </code> <code> peek ( ) </code> Retrieves , but does not remove , the head of this queue , or returns <code> null </code> if this queue is empty . 
<code> E </code> <code> poll ( ) </code> Retrieves and removes the head of this queue , or returns <code> null </code> if this queue is empty . 
<code> E </code> <code> remove ( ) </code> Retrieves and removes the head of this queue . 
Methods inherited from interface java . util . 
Collection <code> addAll , clear , contains , containsAll , equals , hashCode , isEmpty , iterator , parallelStream , remove , removeAll , removeIf , retainAll , size , spliterator , stream , toArray , toArray </code> 
Methods inherited from interface java . lang . 
Iterable <code> forEach </code> 
Method Detail 
add <pre> boolean add ( E e ) </pre> Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions , returning <code> true </code> upon success and throwing an <code> IllegalStateException </code> if no space is currently available . 
Specified by : <code> add </code> in interface <code> Collection Parameters : <code> e </code> - the element to add Returns : <code> true </code> ( as specified by <code> Collection . add ( E ) </code> ) Throws : <code> IllegalStateException </code> - if the element cannot be added at this time due to capacity restrictions <code> ClassCastException </code> - if the class of the specified element prevents it from being added to this queue <code> NullPointerException </code> - if the specified element is null and this queue does not permit null elements <code> IllegalArgumentException </code> - if some property of this element prevents it from being added to this queue 
offer <pre> boolean offer ( E e ) </pre> Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions . When using a capacity - restricted queue , this method is generally preferable to <code> add ( E ) </code> , which can fail to insert an element only by throwing an exception . 
Parameters : <code> e </code> - the element to add Returns : <code> true </code> if the element was added to this queue , else <code> false </code> Throws : <code> ClassCastException </code> - if the class of the specified element prevents it from being added to this queue <code> NullPointerException </code> - if the specified element is null and this queue does not permit null elements <code> IllegalArgumentException </code> - if some property of this element prevents it from being added to this queue 
remove <pre> E remove ( ) </pre> Retrieves and removes the head of this queue . 
This method differs from <code> poll </code> only in that it throws an exception if this queue is empty . 
Returns : the head of this queue Throws : <code> NoSuchElementException </code> - if this queue is empty 
poll <pre> E poll ( ) </pre> Retrieves and removes the head of this queue , or returns <code> null </code> if this queue is empty . 
Returns : the head of this queue , or <code> null </code> if this queue is empty 
element <pre> E element ( ) </pre> Retrieves , but does not remove , the head of this queue . 
This method differs from <code> peek </code> only in that it throws an exception if this queue is empty . 
Returns : the head of this queue Throws : <code> NoSuchElementException </code> - if this queue is empty 
peek <pre> E peek ( ) </pre> Retrieves , but does not remove , the head of this queue , or returns <code> null </code> if this queue is empty . 
Returns : the head of this queue , or <code> null </code> if this queue is empty 
Skip navigation links 
Overview Package Class Use Tree Deprecated Index Help 
Java™ PlatformStandard Ed . 8 
Prev Class Next Class 
Frames No Frames 
All Classes 
Summary : Nested | Field | Constr | Method 
Detail : Field | Constr | Method 
Submit a bug or feature For further API reference and developer documentation , see Java SE Documentation . 
That documentation contains more detailed , developer - targeted descriptions , with conceptual overviews , definitions of terms , workarounds , and working code examples . 
Copyright © 1993 , 2020 , Oracle and / or its affiliates . 
All rights reserved . 
Use is subject to license terms . 
Also see the documentation redistribution policy . 