package Package
wk8 PName
; ;

import Import
java.util.Scanner Lib
; ;

public AccMod
class Class
Q1 ClassName
{ {
private AccMod
static Static
int DType
computerWins Var
= Assign
0 Num
; ;
private AccMod
static Static
int DType
playerWins Var
= Assign
0 Num
; ;
private AccMod
static Static
int DType
ties Var
= Assign
0 Num
; ;
public AccMod
enum Enum
Choices DType
{ {
ROCK Val
, DLim
PAPER Val
, DLim
SCISSORS Val
} }
public AccMod
static Static
Choices DType
computerChoice FunDef
( ParOpen
) ParClose
{ {
int DType
computer Var
= Assign
(int) Cast
( Operator
Math.random() FunCall
* Operator
3 Val
) Operator
+ Operator
1 Val
; ;
return return
helperChoice FunCall
( ParOpen
computer Par
) ParClose
; ;
} }
public AccMod
static Static
int DType
didPlayerWin FunDef
( ParOpen
Choices DType
player Var
, DLim
Choices DType
computer Var
) ParClose
{ {
if ?St
( ParOpen
( Operator
player Var
== ?Op
Choices.ROCK Val
&& ?Op
computer Var
== ?Op
Choices.SCISSORS Val
) Operator
|| ?Op
( Operator
player Var
== ?Op
Choices.SCISSORS Val
&& ?Op
computer Var
== ?Op
Choices.PAPER Val
) Operator
|| ?Op
( Operator
player Var
== ?Op
Choices.PAPER Val
&& ?Op
computer Var
== ?Op
Choices.ROCK Val
) Operator
) ParClose
{ {
return Return
1 Val
; ;
} }
else ?St
if ?St
( ParOpen
player.equals FunCall
( ParOpen
computer Var
) ParClose
) ParClose
{ {
return Return
0 Val
; ;
} }
else ?St
{ {
return Return
-1 Val
; ;
} }
} }
private AccMod
static Static
Choices DType
helperChoice FunDef
( ParOpen
int DType
choice Var
) ParClose
{ {
Choices DType
out Var
; ;
switch ?St
( ParOpen
choice Var
) ParClose
{ {
case ?Op
1 Val
: ?Op
out Var
= Assign
Choices.ROCK Val
; ;
break ?Op
; ;
case ?Op
2 Val
: ?Op
out Var
= Assign
Choices.PAPER Val
; ;
break ?Op
; ;
case ?Op
3 Val
: ?Op
out Var
= Assign
Choices.SCISSORS Val
; ;
break ?Op
; ;
default: ?Op
out Var
= Assign
null Val
; ;
} }
return Return
out Var
; ;
} }
public AccMod
static Static
void Void
main FunDef
( ParOpen
String DType
args Var
[ ArrSOpen
] ArrSClose
) ParClose
{ {
Scanner DType
scanner Var
= Assign
new New
Scanner DType
( ParOpen
System.in Var
) ParClose
; ;
boolean DType
isRunning Var
= Assign
true Val
; ;
int DType
choice Var
; ;
while Loop
( ParOpen
isRunning Var
) ParClose
{ {
System.out.println FunCall
(  ParOpen
" StringBegin
The Val
Player Val
has Val
won Val
" StringEnd
+ Operator
playerWins Var
+ Operator
" StringBegin
rounds Val
this Val
session. Val
" StringEnd
) ParClose
; ;
System.out.println FunCall
( ParOpen
" StringBegin
The Val
Computer Val
has Val
won Val
" StringEnd
+ Operator
computerWins Var
+ Operator
" StringBegin
rounds Val
this Val
session. Val
" StringEnd
) ParClose
; ;

System.out.println FunCall
( ParOpen
" StringBegin
There Val
have Val
been Val
" StringEnd
+ Operator
ties Val
+ Operator
" StringBegin
tie(s). Val
" StringEnd
) ParClose
; ;
System.out.println FunCall
( ParOpen
" StringBegin
Enter Val
1 Val
for Val
Rock Val
" StringEnd
) ParClose
; ;
System.out.println FunCall
( ParOpen
" StringBegin
Enter Val
2 Val
for Val
Paper Val
" StringBegin
) ParClose
; ;
System.out.println FunCall
( ParOpen
" StringBegin
Enter Val
3 Val
for Val
Scissors Val
" StringClose
) ParClose
; ;
System.out.println FunCall
( ParOpen
" StringBegin
Enter Val
anything Val
else Val
to Val
exit Val
game Val
" StringEnd
) ParClose
; ;
System.out.print FunCall
( ParOpen
" StringBegin
Enter Val
choice: Val
" StringEnd
) ParClose
; ;
choice Var
= Assign
scanner.nextInt FunCall
( ParOpen
) ParClose
; ;
if ?St
( ParOpen
choice Var
< ?Op
4 Val
&& ?Op
choice Var
> ?Op
0 Val
) ParClose
{ {
Choices DType
player Var
= Assign
helperChoice FunCall
( ParOpen
choice Var
) ParClose
; ;
Choices DType
computer Var
= Assign
computerChoice FunCall
( ParOpen
) ParClose
; ;
if ?St
( ParOpen
didPlayerWin FunCall
( ParOpen
player Var
, DLim
computer Var
) ParClose
== ?Op
1 Val
) ParClose
{ {
playerWins Var
++ Inc/Dec
; ;
System.out.println FunCall
( ParOpen
" StringOpen
Player Val
has Val
picked Val
" StringClose
+ Operator
player.toString FunCall
( ParOpen
) ParClose
+ Operator
" StringOpen
Computer Val
has Val
picked Val
" StringClose
+ Operator
computer.toString FunCall
( ParOpen
) ParClose
) ParClose
; ;
System.out.println FunCall
( ParOpen
" StringOpen
Player Val
has Val
won Val
\n SC
" StringClose
) ParClose
; ;
} }
else ?St
if ?St
( ParOpen
didPlayerWin FunCall
( ParOpen
player Var
, DLim
computer Var
) ParClose
== ?Op
0 Val
) ParClose
{ {
ties Var
++ Inc/Dec
; ;
System.out.println FunCall
( ParOpen
" StringOpen
Player Val
has Val
picked Val
" StringClose
+ Operator
player.toString FunCall
( ParOpen
) ParClose
+ Operator
" StringOpen
Computer Val
has Val
picked Val
" Operator
+ Operator
computer.toString FunCall
( ParOpen
) ParClose
) ParClose
; ;
System.out.println FunCall
( ParOpen
" StringOpen
There Val
has Val
been Val
a Val
tie Val
\n SC
" StringClose
) ParClose
; ;
} }
else ?St
{ {
computerWins Var
++ Inc/Dec
; ;
System.out.println FunCall
( ParOpen
" StringOpen
Player Val
has Val
picked Val
" StringClose
+ Operator
player.toString FunCall
( ParOpen
) ParClose
+ Operator
" StringOpen
Computer Val
has Val
picked Val
" StringClose
+ Operator
computer.toString FunCall
( ParOpen
) ParClose
) ParClose
; ;
System.out.println FunCall
( ParOpen
" StringOpen
Computer Val
has Val
won Val
\n SC
" StringClose
) ParClose
; ;
} }
} }
else ?St
{ {
isRunning Var
= Assign
false Val
; ;
} }
} }
} }
} }